// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PPL reference flyout component Renders PPL reference flyout 1`] = `
<PPLReferenceFlyout
  closeFlyout={[Function]}
  module="explorere"
>
  <FlyoutContainers
    ariaLabel="pplReferenceFlyout"
    closeFlyout={[Function]}
    flyoutBody={
      <EuiFlyoutBody>
        <EuiFlexGroup
          component="span"
        >
          <EuiFlexItem>
            <EuiComboBox
              async={false}
              compressed={false}
              fullWidth={false}
              isClearable={true}
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "Overview",
                    "value": "## Overview
---
Piped Processing Language (PPL), powered by OpenSearch, enables
OpenSearch users with exploration and discovery of, and finding search
patterns in data stored in OpenSearch, using a set of commands delimited
by pipes (|). These are essentially read-only requests to process data
and return results.

Currently, OpenSearch users can query data using either Query DSL or
SQL. Query DSL is powerful and fast. However, it has a steep learning
curve, and was not designed as a human interface to easily create ad hoc
queries and explore user data. SQL allows users to extract and analyze
data in OpenSearch in a declarative manner. OpenSearch now makes its
search and query engine robust by introducing Piped Processing Language
(PPL). It enables users to extract insights from OpenSearch with a
sequence of commands delimited by pipes () syntax. It enables
developers, DevOps engineers, support engineers, site reliability
engineers (SREs), and IT managers to effectively discover and explore
log, monitoring and observability data stored in OpenSearch.

We expand the capabilities of our Workbench, a comprehensive and
integrated visual query tool currently supporting only SQL, to run
on-demand PPL commands, and view and save results as text and JSON. We
also add a new interactive standalone command line tool, the PPL CLI, to
run on-demand PPL commands, and view and save results as text and JSON.

The query start with search command and then flowing a set of command
delimited by pipe ( for example, the following query retrieve firstname
and lastname from accounts if age large than 18.

\`\`\` 
source=accounts
| where age > 18
| fields firstname, lastname
\`\`\`
",
                  },
                  Object {
                    "label": "Commands",
                    "options": Array [
                      Object {
                        "label": "Syntax",
                        "value": "## Syntax
---
### Command Order

The PPL query started with \`search\` command to reference a table search
from. All the following command could be in any order. In the following
example, \`search\` command refer the accounts index as the source, then
using fields and where command to do the further processing.

\`\`\` 
search source=accounts
| where age > 18
| fields firstname, lastname
\`\`\`

### Required arguments

Required arguments are shown in angle brackets < >.

### Optional arguments

Optional arguments are enclosed in square brackets [ ].",
                      },
                      Object {
                        "label": "dedup",
                        "value": "## dedup
---

### Description

Using 'dedup' command to remove identical document defined by field from
the search result.

### Syntax

dedup [int] &lt;field-list&gt; [keepempty=&lt;bool&gt;]
[consecutive=&lt;bool&gt;]

-   int: optional. The 'dedup' command retains multiple events for each
    combination when you specify &lt;int&gt;. The number for &lt;int&gt;
    must be greater than 0. If you do not specify a number, only the
    first occurring event is kept. All other duplicates are removed from
    the results. **Default:** 1
-   keepempty: optional. if true, keep the document if the any field in
    the field-list has NULL value or field is MISSING. **Default:**
    false.
-   consecutive: optional. If set to true, removes only events with
    duplicate combinations of values that are consecutive. **Default:**
    false.
-   field-list: mandatory. The comma-delimited field list. At least one
    field is required.

### Example 1: Dedup by one field

The example show dedup the document with gender field.

PPL query:

    os> source=accounts | dedup gender | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+

### Example 2: Keep 2 duplicates documents

The example show dedup the document with gender field keep 2
duplication.

PPL query:

    os> source=accounts | dedup 2 gender | fields account_number, gender;
    fetched rows / total rows = 3/3
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 6                | M        |
    | 13               | F        |
    +------------------+----------+

### Example 3: Keep or Ignore the empty field by default

The example show dedup the document by keep null value field.

PPL query:

    os> source=accounts | dedup email keepempty=true | fields account_number, email;
    fetched rows / total rows = 4/4
    +------------------+-----------------------+
    | account_number   | email                 |
    |------------------+-----------------------|
    | 1                | amberduke@pyrami.com  |
    | 6                | hattiebond@netagy.com |
    | 13               | null                  |
    | 18               | daleadams@boink.com   |
    +------------------+-----------------------+

The example show dedup the document by ignore the empty value field.

PPL query:

    os> source=accounts | dedup email | fields account_number, email;
    fetched rows / total rows = 3/3
    +------------------+-----------------------+
    | account_number   | email                 |
    |------------------+-----------------------|
    | 1                | amberduke@pyrami.com  |
    | 6                | hattiebond@netagy.com |
    | 18               | daleadams@boink.com   |
    +------------------+-----------------------+

#### Example 4: Dedup in consecutive document

The example show dedup the consecutive document.

PPL query:

    os> source=accounts | dedup gender consecutive=true | fields account_number, gender;
    fetched rows / total rows = 3/3
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    | 18               | M        |
    +------------------+----------+

#### Limitation
The \`dedup\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                      Object {
                        "label": "eval",
                        "value": "## eval
---

### Description

The 'eval' command evaluate the expression and append the result to the
search result.

### Syntax

eval &lt;field&gt;=&lt;expression&gt; [\\",\\"
&lt;field&gt;=&lt;expression&gt; ]...

-   field: mandatory. If the field name not exist, a new field is added.
    If the field name already exists, it will be overrided.
-   expression: mandatory. Any expression support by the system.

### Example 1: Create the new field

The example show to create new field doubleAge for each document. The
new doubleAge is the evaluation result of age multiply by 2.

PPL query:

    os> source=accounts | eval doubleAge = age * 2 | fields age, doubleAge ;
    fetched rows / total rows = 4/4
    +-------+-------------+
    | age   | doubleAge   |
    |-------+-------------|
    | 32    | 64          |
    | 36    | 72          |
    | 28    | 56          |
    | 33    | 66          |
    +-------+-------------+

### Example 2: Override the existing field

The example show to override the exist age field with age plus 1.

PPL query:

    os> source=accounts | eval age = age + 1 | fields age ;
    fetched rows / total rows = 4/4
    +-------+
    | age   |
    |-------|
    | 33    |
    | 37    |
    | 29    |
    | 34    |
    +-------+

### Example 3: Create the new field with field defined in eval

The example show to create a new field ddAge with field defined in eval
command. The new field ddAge is the evaluation result of doubleAge
multiply by 2, the doubleAge is defined in the eval command.

PPL query:

    os> source=accounts | eval doubleAge = age * 2, ddAge = doubleAge * 2 | fields age, doubleAge, ddAge ;
    fetched rows / total rows = 4/4
    +-------+-------------+---------+
    | age   | doubleAge   | ddAge   |
    |-------+-------------+---------|
    | 32    | 64          | 128     |
    | 36    | 72          | 144     |
    | 28    | 56          | 112     |
    | 33    | 66          | 132     |
    +-------+-------------+---------+

#### Limitation
The \`eval\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                      Object {
                        "label": "fields",
                        "value": "## fields
---
### Description

Using \`fields\` command to keep or remove fields from the search result.

### Syntax

fields [+|-] &lt;field-list&gt;

-   index: optional. if the plus (+) is used, only the fields specified
    in the field list will be keep. if the minus (-) is used, all the
    fields specified in the field list will be removed. **Default** +
-   field list: mandatory. comma-delimited keep or remove fields.

### Example 1: Select specified fields from result

The example show fetch account_number, firstname and lastname fields
from search results.

PPL query:

    os> source=accounts | fields account_number, firstname, lastname;
    fetched rows / total rows = 4/4
    +------------------+-------------+------------+
    | account_number   | firstname   | lastname   |
    |------------------+-------------+------------|
    | 1                | Amber       | Duke       |
    | 6                | Hattie      | Bond       |
    | 13               | Nanette     | Bates      |
    | 18               | Dale        | Adams      |
    +------------------+-------------+------------+

### Example 2: Remove specified fields from result

The example show fetch remove account_number field from search results.

PPL query:

    os> source=accounts | fields account_number, firstname, lastname | fields - account_number ;
    fetched rows / total rows = 4/4
    +-------------+------------+
    | firstname   | lastname   |
    |-------------+------------|
    | Amber       | Duke       |
    | Hattie      | Bond       |
    | Nanette     | Bates      |
    | Dale        | Adams      |
    +-------------+------------+
",
                      },
                      Object {
                        "label": "rename",
                        "value": "## rename
---
### Description

Using \`rename\` command to rename one or more fields in the search
result.

### Syntax

rename &lt;source-field&gt; AS &lt;target-field&gt;[\\",\\"
&lt;source-field&gt; AS &lt;target-field&gt;]...

-   source-field: mandatory. The name of the field you want to rename.
-   field list: mandatory. The name you want to rename to.

### Example 1: Rename one field

The example show rename one field.

PPL query:

    os> source=accounts | rename account_number as an | fields an;
    fetched rows / total rows = 4/4
    +------+
    | an   |
    |------|
    | 1    |
    | 6    |
    | 13   |
    | 18   |
    +------+

### Example 2: Rename multiple fields

The example show rename multiple fields.

PPL query:

    os> source=accounts | rename account_number as an, employer as emp | fields an, emp;
    fetched rows / total rows = 4/4
    +------+---------+
    | an   | emp     |
    |------+---------|
    | 1    | Pyrami  |
    | 6    | Netagy  |
    | 13   | Quility |
    | 18   | null    |
    +------+---------+

#### Limitation
The \`rename\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                      Object {
                        "label": "search",
                        "value": "## search 
---

### Description

Using \`search\` command to retrieve document from the index. \`search\`
command could be only used as the first command in the PPL query.

### Syntax

search source=&lt;index&gt; [boolean-expression]

-   search: search keywords, which could be ignore.
-   index: mandatory. search command must specify which index to query
    from.
-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Fetch all the data

The example show fetch all the document from accounts index.

PPL query:

    os> source=accounts;
    fetched rows / total rows = 4/4
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+
    | account_number | firstname | address              | balance | gender | city   | employer | state | age | email                 | lastname |
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+
    | 1              | Amber     | 880 Holmes Lane      | 39225   | M      | Brogan | Pyrami   | IL    | 32  | amberduke@pyrami.com  | Duke     |
    | 6              | Hattie    | 671 Bristol Street   | 5686    | M      | Dante  | Netagy   | TN    | 36  | hattiebond@netagy.com | Bond     |
    | 13             | Nanette   | 789 Madison Street   | 32838   | F      | Nogal  | Quility  | VA    | 28  | null                  | Bates    |
    | 18             | Dale      | 467 Hutchinson Court | 4180    | M      | Orick  | null     | MD    | 33  | daleadams@boink.com   | Adams    |
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+

### Example 2: Fetch data with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts account_number=1 or gender=\\"F\\";
    fetched rows / total rows = 2/2
    +------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------+
    | account_number   | firstname   | address            | balance   | gender   | city   | employer   | state   | age   | email                | lastname   |
    |------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------|
    | 1                | Amber       | 880 Holmes Lane    | 39225     | M        | Brogan | Pyrami     | IL      | 32    | amberduke@pyrami.com | Duke       |
    | 13               | Nanette     | 789 Madison Street | 32838     | F        | Nogal  | Quility    | VA      | 28    | null                 | Bates      |
    +------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------+
",
                      },
                      Object {
                        "label": "sort",
                        "value": "## sort 
---
### Description

Using \`sort\` command to sorts all the search result by the specified
fields.

### Syntax

sort &lt;[+|-] sort-field&gt;...

-   [+|-]: optional. The plus [+] stands for ascending order and
    NULL/MISSING first and a minus [-] stands for descending order and
    NULL/MISSING last. **Default:** ascending order and NULL/MISSING
    first.
-   sort-field: mandatory. The field used to sort.

### Example 1: Sort by one field

The example show sort all the document with age field in ascending
order.

PPL query:

    os> source=accounts | sort age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 13               | 28    |
    | 1                | 32    |
    | 18               | 33    |
    | 6                | 36    |
    +------------------+-------+

### Example 2: Sort by one field return all the result

The example show sort all the document with age field in ascending
order.

PPL query:

    os> source=accounts | sort age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 13               | 28    |
    | 1                | 32    |
    | 18               | 33    |
    | 6                | 36    |
    +------------------+-------+

### Example 3: Sort by one field in descending order

The example show sort all the document with age field in descending
order.

PPL query:

    os> source=accounts | sort - age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 6                | 36    |
    | 18               | 33    |
    | 1                | 32    |
    | 13               | 28    |
    +------------------+-------+

### Example 4: Sort by multiple field 

The example show sort all the document with gender field in ascending
order and age field in descending.

PPL query:

    os> source=accounts | sort + gender, - age | fields account_number, gender, age;
    fetched rows / total rows = 4/4
    +------------------+----------+-------+
    | account_number   | gender   | age   |
    |------------------+----------+-------|
    | 13               | F        | 28    |
    | 6                | M        | 36    |
    | 18               | M        | 33    |
    | 1                | M        | 32    |
    +------------------+----------+-------+

### Example 5: Sort by field include null value

The example show sort employer field by default option (ascending order
and null first), the result show that null value is in the first row.

PPL query:

    os> source=accounts | sort employer | fields employer;
    fetched rows / total rows = 4/4
    +------------+
    | employer   |
    |------------|
    | null       |
    | Netagy     |
    | Pyrami     |
    | Quility    |
    +------------+
",
                      },
                      Object {
                        "label": "stats",
                        "value": "## stats
---

### Description

Using \`stats\` command to calculate the aggregation from search result.

The following table catalogs the aggregation functions and also
indicates how the NULL/MISSING values is handled:

|          |             |             |
|----------|-------------|-------------|
| Function | NULL        | MISSING     |
| COUNT    | Not counted | Not counted |
| SUM      | Ignore      | Ignore      |
| AVG      | Ignore      | Ignore      |
| MAX      | Ignore      | Ignore      |
| MIN      | Ignore      | Ignore      |

### Syntax

stats &lt;aggregation&gt;... [by-clause]...

-   aggregation: mandatory. A aggregation function. The argument of
    aggregation must be field.
-   by-clause: optional. The one or more fields to group the results by.
    **Default**: If no &lt;by-clause&gt; is specified, the stats command
    returns only one row, which is the aggregation over the entire
    result set.

### **Aggregation Functions**
---
### **COUNT**

**Description**

Usage: Returns a count of the number of expr in the rows retrieved by a
SELECT statement.

Example:

    os> source=accounts | stats count();
    fetched rows / total rows = 1/1
    +-----------+
    | count()   |
    |-----------|
    | 4         |
    +-----------+

### **SUM**

**Description**

Usage: SUM(expr). Returns the sum of expr.

Example:

    os> source=accounts | stats sum(age) by gender;
    fetched rows / total rows = 2/2
    +------------+----------+
    | sum(age)   | gender   |
    |------------+----------|
    | 28         | F        |
    | 101        | M        |
    +------------+----------+

### **AVG**

**Description**

Usage: AVG(expr). Returns the average value of expr.

Example:

    os> source=accounts | stats avg(age) by gender;
    fetched rows / total rows = 2/2
    +--------------------+----------+
    | avg(age)           | gender   |
    |--------------------+----------|
    | 28.0               | F        |
    | 33.666666666666664 | M        |
    +--------------------+----------+

### **MAX**

**Description**

Usage: MAX(expr). Returns the maximum value of expr.

Example:

    os> source=accounts | stats max(age);
    fetched rows / total rows = 1/1
    +------------+
    | max(age)   |
    |------------|
    | 36         |
    +------------+

### **MIN**

**Description**

Usage: MIN(expr). Returns the minimum value of expr.

Example:

    os> source=accounts | stats min(age);
    fetched rows / total rows = 1/1
    +------------+
    | min(age)   |
    |------------|
    | 28         |
    +------------+

### **VAR_SAMP**

**Description**

Usage: VAR_SAMP(expr). Returns the sample variance of expr.

Example:

    os> source=accounts | stats var_samp(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | var_samp(age)      |
    |--------------------|
    | 10.916666666666666 |
    +--------------------+

### **VAR_POP**

**Description**

Usage: VAR_POP(expr). Returns the population standard variance of expr.

Example:

    os> source=accounts | stats var_pop(age);
    fetched rows / total rows = 1/1
    +----------------+
    | var_pop(age)   |
    |----------------|
    | 8.1875         |
    +----------------+

### **STDDEV_SAMP**

**Description**

Usage: STDDEV_SAMP(expr). Return the sample standard deviation of expr.

Example:

    os> source=accounts | stats stddev_samp(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | stddev_samp(age)   |
    |--------------------|
    | 3.304037933599835  |
    +--------------------+

### **STDDEV_POP**

**Description**

Usage: STDDEV_POP(expr). Return the population standard deviation of
expr.

Example:

    os> source=accounts | stats stddev_pop(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | stddev_pop(age)    |
    |--------------------|
    | 2.8613807855648994 |
    +--------------------+

### **By Clause**

The by clause could be the fields and expressions like scalar functions
and aggregation functions. Besides, the span clause can also be used in
the by clause to split specific field into buckets in the same interval,
the stats then does the aggregation by these span buckets.

The span syntax is \`span(field_expr, interval_expr)\`, the unit of the
interval expression is the natural unit by default. If the field is a
date and time type field, and the interval is in date/time units, you
will need to specify the unit in the interval expression. For example,
to split the field \`age\` into buckets by 10 years, it looks like
\`span(age, 10)\`. And here is another example of time span, the span to
split a \`timestamp\` field into hourly intervals, it looks like
\`span(timestamp, 1h)\`.

Available time unit:

| Span Interval Units        |
|----------------------------|
| millisecond (ms)           |
| second (s)                 |
| minute (m, case sensitive) |
| hour (h)                   |
| day (d)                    |
| week (w)                   |
| month (M, case sensitive)  |
| quarter (q)                |
| year (y)                   |

### Example 1: Calculate the count of events

The example show calculate the count of events in the accounts.

PPL query:

    os> source=accounts | stats count();
    fetched rows / total rows = 1/1
    +-----------+
    | count()   |
    |-----------|
    | 4         |
    +-----------+

### Example 2: Calculate the average of a field

The example show calculate the average age of all the accounts.

PPL query:

    os> source=accounts | stats avg(age);
    fetched rows / total rows = 1/1
    +------------+
    | avg(age)   |
    |------------|
    | 32.25      |
    +------------+

### Example 3: Calculate the average of a field by group

The example show calculate the average age of all the accounts group by
gender.

PPL query:

    os> source=accounts | stats avg(age) by gender;
    fetched rows / total rows = 2/2
    +--------------------+----------+
    | avg(age)           | gender   |
    |--------------------+----------|
    | 28.0               | F        |
    | 33.666666666666664 | M        |
    +--------------------+----------+

### Example 4: Calculate the average, sum and count of a field by group

The example show calculate the average age, sum age and count of events
of all the accounts group by gender.

PPL query:

    os> source=accounts | stats avg(age), sum(age), count() by gender;
    fetched rows / total rows = 2/2
    +--------------------+------------+-----------+----------+
    | avg(age)           | sum(age)   | count()   | gender   |
    |--------------------+------------+-----------+----------|
    | 28.0               | 28         | 1         | F        |
    | 33.666666666666664 | 101        | 3         | M        |
    +--------------------+------------+-----------+----------+

### Example 5: Calculate the maximum of a field

The example calculates the max age of all the accounts.

PPL query:

    os> source=accounts | stats max(age);
    fetched rows / total rows = 1/1
    +------------+
    | max(age)   |
    |------------|
    | 36         |
    +------------+

### Example 6: Calculate the maximum and minimum of a field by group

The example calculates the max and min age values of all the accounts
group by gender.

PPL query:

    os> source=accounts | stats max(age), min(age) by gender;
    fetched rows / total rows = 2/2
    +------------+------------+----------+
    | max(age)   | min(age)   | gender   |
    |------------+------------+----------|
    | 28         | 28         | F        |
    | 36         | 32         | M        |
    +------------+------------+----------+

### Example 7: Calculate the distinct count of a field

To get the count of distinct values of a field, you can use
\`DISTINCT_COUNT\` (or \`DC\`) function instead of \`COUNT\`. The example
calculates both the count and the distinct count of gender field of all
the accounts.

PPL query:

    os> source=accounts | stats count(gender), distinct_count(gender);
    fetched rows / total rows = 1/1
    +-----------------+--------------------------+
    | count(gender)   | distinct_count(gender)   |
    |-----------------+--------------------------|
    | 4               | 2                        |
    +-----------------+--------------------------+

### Example 8: Calculate the count by a span

The example gets the count of age by the interval of 10 years.

PPL query:

    os> source=accounts | stats count(age) by span(age, 10) as age_span
    fetched rows / total rows = 2/2
    +--------------+------------+
    | count(age)   | age_span   |
    |--------------+------------|
    | 1            | 20         |
    | 3            | 30         |
    +--------------+------------+

### Example 9: Calculate the count by a gender and span

The example gets the count of age by the interval of 10 years and group by gender.

PPL query::

    os> source=accounts | stats count() as cnt by span(age, 5) as age_span, gender
    fetched rows / total rows = 3/3
    +-------+------------+----------+
    | cnt   | age_span   | gender   |
    |-------+------------+----------|
    | 1     | 25         | F        |
    | 2     | 30         | M        |
    | 1     | 35         | M        |
    +-------+------------+----------+
",
                      },
                      Object {
                        "label": "where",
                        "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                      },
                      Object {
                        "label": "head",
                        "value": "## head
---

### Description

The \`head\` command returns the first N number of specified results in
search order.

### Syntax

head [N]

-   N: optional. number of results to return. **Default:** 10

### Example 1: Get first 10 results

The example show first 10 results from accounts index.

PPL query:

    os> source=accounts | fields firstname, age | head;
    fetched rows / total rows = 10/10
    +---------------+-----------+
    | firstname     | age       |
    |---------------+-----------|
    | Amber         | 32        |
    | Hattie        | 36        |
    | Nanette       | 28        |
    | Dale          | 33        |
    | Elinor        | 36        |
    | Virginia      | 39        |
    | Dillard       | 34        |
    | Mcgee         | 39        |
    | Aurelia       | 37        |
    | Fulton        | 23        |
    +---------------+-----------+

### Example 2: Get first N results

The example show first N results from accounts index.

PPL query:

    os> source=accounts | fields firstname, age | head 3;
    fetched rows / total rows = 3/3
    +---------------+-----------+
    | firstname     | age       |
    |---------------+-----------|
    | Amber         | 32        |
    | Hattie        | 36        |
    | Nanette       | 28        |
    +---------------+-----------+

#### Limitation
The \`head\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                      Object {
                        "label": "parse",
                        "value": "## parse 
---
### Description

The \`parse\` command parses a text field using a regular expression and append
the result to the search result.

### Syntax

parse &lt;field&gt; &lt;regular-expression&gt;

- field: mandatory. The field must be a text field.
- regular-expression: mandatory. The regular expression used to extract new
fields from given text field. If a new field name already exists, it will
replace the original field.

### Regular Expression

The regular expression is used to match the whole text field of each document
with Java regex engine. Each named capture group in the expression will become
a new \`STRING\` field.

### Example 1: Create the new field

The example shows how to create new field \`host\` for each document. \`host\`
will be the host name after \`@\` in \`email\` field. Parsing a null field will
return an empty string.

PPL query:

    os> source=accounts | parse email '.+@(?<host>.+)' | fields email, host ;
    fetched rows / total rows = 4/4
    +-----------------------+------------+
    | email                 | host       |
    |-----------------------+------------|
    | amberduke@pyrami.com  | pyrami.com |
    | hattiebond@netagy.com | netagy.com |
    | null                  |            |
    | daleadams@boink.com   | boink.com  |
    +-----------------------+------------+

### Example 2: Override the existing field

The example shows how to override the existing \`address\` field with street
number removed.

PPL query:

    os> source=accounts | parse address '\\\\d+ (?<address>.+)' | fields address ;
    fetched rows / total rows = 4/4
    +------------------+
    | address          |
    |------------------|
    | Holmes Lane      |
    | Bristol Street   |
    | Madison Street   |
    | Hutchinson Court |
    +------------------+

### Example 3: Filter and sort by casted parsed field

The example shows how to sort street numbers that are higher than 500 in
\`address\` field.

PPL query:

    os> source=accounts | parse address '(?<streetNumber>d+) (?<street>.+)' | where cast(streetNumber as int) > 500 | sort num(streetNumber) | fields streetNumber, street ;
    fetched rows / total rows = 3/3
    +----------------+----------------+
    | streetNumber   | street         |
    |----------------+----------------|
    | 671            | Bristol Street |
    | 789            | Madison Street |
    | 880            | Holmes Lane    |
    +----------------+----------------+

### Limitation

There are a few limitations with parse command:

- Fields defined by parse cannot be parsed again.

  The following command will not work:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | parse street '\\\\w+ (?<road>\\\\w+)' ;

- Fields defined by parse cannot be overridden with other commands.

  \`where\` will not match any documents since \`street\` cannot be overridden:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | eval street='1' | where street='1' ;

- The text field used by parse cannot be overridden.

  \`street\` will not be successfully parsed since \`address\` is overridden:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | eval address='1' ;

- Fields defined by parse cannot be filtered/sorted after using them in
\`stats\` command.

  \`where\` in the following command will not work:

      source=accounts | parse email '.+@(?<host>.+)' | stats avg(age) by host | where host=pyrami.com ;
",
                      },
                      Object {
                        "label": "rare",
                        "value": "## rare
---

### Description

Using \`rare\` command to find the least common tuple of values of all
fields in the field list.

**Note**: A maximum of 10 results is returned for each distinct tuple of
values of the group-by fields.

### Syntax

rare &lt;field-list&gt; [by-clause]

-   field-list: mandatory. comma-delimited list of field names.
-   by-clause: optional. one or more fields to group the results by.

### Example 1: Find the least common values in a field

The example finds least common gender of all the accounts.

PPL query:

    os> source=accounts | rare gender;
    fetched rows / total rows = 2/2
    +------------+
    | gender     |
    |------------|
    | F          |
    |------------|
    | M          |
    +------------+

### Example 2: Find the least common values organized by gender

The example finds least common age of all the accounts group by gender.

PPL query:

    os> source=accounts | rare age by gender;
    fetched rows / total rows = 20/20
    +----------+----------+
    | gender   | age      |
    |----------+----------|
    | F        | 29       |
    | F        | 20       |
    | F        | 23       |
    | F        | 25       |
    | F        | 37       |
    | F        | 38       |
    | F        | 40       |
    | F        | 27       |
    | F        | 36       |
    | F        | 24       |
    | M        | 27       |
    | M        | 24       |
    | M        | 34       |
    | M        | 38       |
    | M        | 28       |
    | M        | 39       |
    | M        | 21       |
    | M        | 30       |
    | M        | 25       |
    | M        | 29       |
    +----------+----------+

#### Limitation
The \`rare\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                      Object {
                        "label": "top",
                        "value": "## top
---
### Description

Using \`top\` command to find the most common tuple of values of all
fields in the field list.

### Syntax

top [N] &lt;field-list&gt; [by-clause]

-   N: number of results to return. **Default**: 10
-   field-list: mandatory. comma-delimited list of field names.
-   by-clause: optional. one or more fields to group the results by.

### Example 1: Find the most common values in a field

The example finds most common gender of all the accounts.

PPL query:

    os> source=accounts | top gender;
    fetched rows / total rows = 2/2
    +------------+
    | gender     |
    |------------|
    | M          |
    |------------|
    | F          |
    +------------+

### Example 2: Find the most common values in a field

The example finds most common gender of all the accounts.

PPL query:

    os> source=accounts | top 1 gender;
    fetched rows / total rows = 1/1
    +------------+
    | gender     |
    |------------|
    | M          |
    +------------+

### Example 3: Find the most common values organized by gender

The example finds most common age of all the accounts group by gender.

PPL query:

    os> source=accounts | top 1 age by gender;
    fetched rows / total rows = 2/2
    +----------+----------+
    | gender   | age      |
    |----------+----------|
    | F        | 39       |
    | M        | 31       |
    +----------+----------+

#### Limitation
The \`top\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                      },
                    ],
                  },
                  Object {
                    "label": "Functions",
                    "options": Array [
                      Object {
                        "label": "Math",
                        "value": "## Math
---

### ABS

**Description**

Usage: abs(x) calculate the abs x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER/LONG/FLOAT/DOUBLE

Example:

    os> source=people | eval \`ABS(-1)\` = ABS(-1) | fields \`ABS(-1)\`
    fetched rows / total rows = 1/1
    +-----------+
    | ABS(-1)   |
    |-----------|
    | 1         |
    +-----------+

### ACOS

**Description**

Usage: acos(x) calculate the arc cosine of x. Returns NULL if x is not
in the range -1 to 1.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ACOS(0)\` = ACOS(0) | fields \`ACOS(0)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | ACOS(0)            |
    |--------------------|
    | 1.5707963267948966 |
    +--------------------+

### ASIN

**Description**

Usage: asin(x) calculate the arc sine of x. Returns NULL if x is not in
the range -1 to 1.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ASIN(0)\` = ASIN(0) | fields \`ASIN(0)\`
    fetched rows / total rows = 1/1
    +-----------+
    | ASIN(0)   |
    |-----------|
    | 0.0       |
    +-----------+

### ATAN

**Description**

Usage: atan(x) calculates the arc tangent of x. atan(y, x&#41; calculates
the arc tangent of y / x, except that the signs of both arguments are
used to determine the quadrant of the result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ATAN(2)\` = ATAN(2), \`ATAN(2, 3)\` = ATAN(2, 3) | fields \`ATAN(2)\`, \`ATAN(2, 3)\`
    fetched rows / total rows = 1/1
    +--------------------+--------------------+
    | ATAN(2)            | ATAN(2, 3)         |
    |--------------------+--------------------|
    | 1.1071487177940904 | 0.5880026035475675 |
    +--------------------+--------------------+

### ATAN2

**Description**

Usage: atan2(y, x&#41; calculates the arc tangent of y / x, except that the
signs of both arguments are used to determine the quadrant of the
result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ATAN2(2, 3)\` = ATAN2(2, 3) | fields \`ATAN2(2, 3)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | ATAN2(2, 3)        |
    |--------------------|
    | 0.5880026035475675 |
    +--------------------+

### CEIL

**Description**

Usage: ceil(x) return the smallest integer value this is greater or
equal to x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`CEIL(2.75)\` = CEIL(2.75) | fields \`CEIL(2.75)\`
    fetched rows / total rows = 1/1
    +--------------+
    | CEIL(2.75)   |
    |--------------|
    | 3            |
    +--------------+

### CONV

**Description**

Usage: CONV(x, a, b) converts the number x from a base to b base.

Argument type: x: STRING, a: INTEGER, b: INTEGER

Return type: STRING

Example:

    os> source=people | eval \`CONV('12', 10, 16)\` = CONV('12', 10, 16), \`CONV('2C', 16, 10)\` = CONV('2C', 16, 10), \`CONV(12, 10, 2)\` = CONV(12, 10, 2), \`CONV(1111, 2, 10)\` = CONV(1111, 2, 10) | fields \`CONV('12', 10, 16)\`, \`CONV('2C', 16, 10)\`, \`CONV(12, 10, 2)\`, \`CONV(1111, 2, 10)\`
    fetched rows / total rows = 1/1
    +----------------------+----------------------+-------------------+---------------------+
    | CONV('12', 10, 16)   | CONV('2C', 16, 10)   | CONV(12, 10, 2)   | CONV(1111, 2, 10)   |
    |----------------------+----------------------+-------------------+---------------------|
    | c                    | 44                   | 1100              | 15                  |
    +----------------------+----------------------+-------------------+---------------------+

### COS

**Description**

Usage: cos(x) calculate the cosine of x, where x is given in radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`COS(0)\` = COS(0) | fields \`COS(0)\`
    fetched rows / total rows = 1/1
    +----------+
    | COS(0)   |
    |----------|
    | 1.0      |
    +----------+

### COT

**Description**

Usage: cot(x) calculate the cotangent of x. Returns out-of-range error
if x equals to 0.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`COT(1)\` = COT(1) | fields \`COT(1)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | COT(1)             |
    |--------------------|
    | 0.6420926159343306 |
    +--------------------+

### CRC32

**Description**

Usage: Calculates a cyclic redundancy check value and returns a 32-bit
unsigned value.

Argument type: STRING

Return type: LONG

Example:

    os> source=people | eval \`CRC32('MySQL')\` = CRC32('MySQL') | fields \`CRC32('MySQL')\`
    fetched rows / total rows = 1/1
    +------------------+
    | CRC32('MySQL')   |
    |------------------|
    | 3259397556       |
    +------------------+

### DEGREES

**Description**

Usage: degrees(x) converts x from radians to degrees.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`DEGREES(1.57)\` = DEGREES(1.57) | fields \`DEGREES(1.57)\`
    fetched rows / total rows  = 1/1
    +-------------------+
    | DEGREES(1.57)     |
    |-------------------|
    | 89.95437383553924 |
    +-------------------+

### E

**Description**

Usage: E() returns the Euler's number

Return type: DOUBLE

Example:

    os> source=people | eval \`E()\` = E() | fields \`E()\`
    fetched rows / total rows = 1/1
    +-------------------+
    | E()               |
    |-------------------|
    | 2.718281828459045 |
    +-------------------+

### EXP

**Description**

Usage: exp(x) return e raised to the power of x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`EXP(2)\` = EXP(2) | fields \`EXP(2)\`
    fetched rows / total rows = 1/1
    +------------------+
    | EXP(2)           |
    |------------------|
    | 7.38905609893065 |
    +------------------+

### FLOOR

**Description**

Usage: floor(x) return the largest integer value this is smaller or
equal to x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`FLOOR(2.75)\` = FLOOR(2.75) | fields \`FLOOR(2.75)\`
    fetched rows / total rows = 1/1
    +---------------+
    | FLOOR(2.75)   |
    |---------------|
    | 2             |
    +---------------+

### LN

**Description**

Usage: ln(x) return the the natural logarithm of x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LN(2)\` = LN(2) | fields \`LN(2)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | LN(2)              |
    |--------------------|
    | 0.6931471805599453 |
    +--------------------+

### LOG

**Description**

Specifications:

Usage: log(x) returns the natural logarithm of x that is the base e
logarithm of the x. log(B, x&#41; is equivalent to log(x)/log(B).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG(2)\` = LOG(2), \`LOG(2, 8)\` = LOG(2, 8) | fields \`LOG(2)\`, \`LOG(2, 8)\`
    fetched rows / total rows = 1/1
    +--------------------+-------------+
    | LOG(2)             | LOG(2, 8)   |
    |--------------------+-------------|
    | 0.6931471805599453 | 3.0         |
    +--------------------+-------------+

### LOG2

**Description**

Specifications:

Usage: log2(x) is equivalent to log(x)/log(2).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG2(8)\` = LOG2(8) | fields \`LOG2(8)\`
    fetched rows / total rows = 1/1
    +-----------+
    | LOG2(8)   |
    |-----------|
    | 3.0       |
    +-----------+

### LOG10

**Description**

Specifications:

Usage: log10(x) is equivalent to log(x)/log(10).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG10(100)\` = LOG10(100) | fields \`LOG10(100)\`
    fetched rows / total rows = 1/1
    +--------------+
    | LOG10(100)   |
    |--------------|
    | 2.0          |
    +--------------+

### MOD

**Description**

Usage: MOD(n, m) calculates the remainder of the number n divided by m.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: Wider type between types of n and m if m is nonzero value.
If m equals to 0, then returns NULL.

Example:

    os> source=people | eval \`MOD(3, 2)\` = MOD(3, 2), \`MOD(3.1, 2)\` = MOD(3.1, 2) | fields \`MOD(3, 2)\`, \`MOD(3.1, 2)\`
    fetched rows / total rows = 1/1
    +-------------+---------------+
    | MOD(3, 2)   | MOD(3.1, 2)   |
    |-------------+---------------|
    | 1           | 1.1           |
    +-------------+---------------+

### PI

**Description**

Usage: PI() returns the constant pi

Return type: DOUBLE

Example:

    os> source=people | eval \`PI()\` = PI() | fields \`PI()\`
    fetched rows / total rows = 1/1
    +-------------------+
    | PI()              |
    |-------------------|
    | 3.141592653589793 |
    +-------------------+

### POW

**Description**

Usage: POW(x, y) calculates the value of x raised to the power of y. Bad
inputs return NULL result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Synonyms: [POWER](#power)

Example:

    os> source=people | eval \`POW(3, 2)\` = POW(3, 2), \`POW(-3, 2)\` = POW(-3, 2), \`POW(3, -2)\` = POW(3, -2) | fields \`POW(3, 2)\`, \`POW(-3, 2)\`, \`POW(3, -2)\`
    fetched rows / total rows = 1/1
    +-------------+--------------+--------------------+
    | POW(3, 2)   | POW(-3, 2)   | POW(3, -2)         |
    |-------------+--------------+--------------------|
    | 9.0         | 9.0          | 0.1111111111111111 |
    +-------------+--------------+--------------------+

### POWER

**Description**

Usage: POWER(x, y) calculates the value of x raised to the power of y.
Bad inputs return NULL result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Synonyms: [POW](#pow)

Example:

    os> source=people | eval \`POWER(3, 2)\` = POWER(3, 2), \`POWER(-3, 2)\` = POWER(-3, 2), \`POWER(3, -2)\` = POWER(3, -2) | fields \`POWER(3, 2)\`, \`POWER(-3, 2)\`, \`POWER(3, -2)\`
    fetched rows / total rows = 1/1
    +---------------+----------------+--------------------+
    | POWER(3, 2)   | POWER(-3, 2)   | POWER(3, -2)       |
    |---------------+----------------+--------------------|
    | 9.0           | 9.0            | 0.1111111111111111 |
    +---------------+----------------+--------------------+

### RADIANS

**Description**

Usage: radians(x) converts x from degrees to radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`RADIANS(90)\` = RADIANS(90) | fields \`RADIANS(90)\`
    fetched rows / total rows  = 1/1
    +--------------------+
    | RADIANS(90)        |
    |--------------------|
    | 1.5707963267948966 |
    +--------------------+

### RAND

**Description**

Usage: RAND()/RAND(N) returns a random floating-point value in the range
0 &lt;= value &lt; 1.0. If integer N is specified, the seed is
initialized prior to execution. One implication of this behavior is with
identical argument N, rand(N) returns the same value each time, and thus
produces a repeatable sequence of column values.

Argument type: INTEGER

Return type: FLOAT

Example:

    os> source=people | eval \`RAND(3)\` = RAND(3) | fields \`RAND(3)\`
    fetched rows / total rows = 1/1
    +------------+
    | RAND(3)    |
    |------------|
    | 0.73105735 |
    +------------+

### ROUND

**Description**

Usage: ROUND(x, d) rounds the argument x to d decimal places, d defaults
to 0 if not specified

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type map:

(INTEGER/LONG [,INTEGER]) -&gt; LONG (FLOAT/DOUBLE [,INTEGER]) -&gt;
LONG

Example:

    os> source=people | eval \`ROUND(12.34)\` = ROUND(12.34), \`ROUND(12.34, 1)\` = ROUND(12.34, 1), \`ROUND(12.34, -1)\` = ROUND(12.34, -1), \`ROUND(12, 1)\` = ROUND(12, 1) | fields \`ROUND(12.34)\`, \`ROUND(12.34, 1)\`, \`ROUND(12.34, -1)\`, \`ROUND(12, 1)\`
    fetched rows / total rows = 1/1
    +----------------+-------------------+--------------------+----------------+
    | ROUND(12.34)   | ROUND(12.34, 1)   | ROUND(12.34, -1)   | ROUND(12, 1)   |
    |----------------+-------------------+--------------------+----------------|
    | 12.0           | 12.3              | 10.0               | 12             |
    +----------------+-------------------+--------------------+----------------+

### SIGN

**Description**

Usage: Returns the sign of the argument as -1, 0, or 1, depending on
whether the number is negative, zero, or positive

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`SIGN(1)\` = SIGN(1), \`SIGN(0)\` = SIGN(0), \`SIGN(-1.1)\` = SIGN(-1.1) | fields \`SIGN(1)\`, \`SIGN(0)\`, \`SIGN(-1.1)\`
    fetched rows / total rows = 1/1
    +-----------+-----------+--------------+
    | SIGN(1)   | SIGN(0)   | SIGN(-1.1)   |
    |-----------+-----------+--------------|
    | 1         | 0         | -1           |
    +-----------+-----------+--------------+

### SIN

**Description**

Usage: sin(x) calculate the sine of x, where x is given in radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`SIN(0)\` = SIN(0) | fields \`SIN(0)\`
    fetched rows / total rows = 1/1
    +----------+
    | SIN(0)   |
    |----------|
    | 0.0      |
    +----------+

### SQRT

**Description**

Usage: Calculates the square root of a non-negative number

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type map:

(Non-negative) INTEGER/LONG/FLOAT/DOUBLE -&gt; DOUBLE (Negative)
INTEGER/LONG/FLOAT/DOUBLE -&gt; NULL

Example:

    os> source=people | eval \`SQRT(4)\` = SQRT(4), \`SQRT(4.41)\` = SQRT(4.41) | fields \`SQRT(4)\`, \`SQRT(4.41)\`
    fetched rows / total rows = 1/1
    +-----------+--------------+
    | SQRT(4)   | SQRT(4.41)   |
    |-----------+--------------|
    | 2.0       | 2.1          |
    +-----------+--------------+
",
                      },
                      Object {
                        "label": "Date and Time",
                        "value": "## Datetime
---

### **ADDDATE**

Description

Usage: adddate(date, INTERVAL expr unit)/ adddate(date, expr) adds the
time interval of second argument to date; adddate(date, days) adds the
second argument as integer number of days to date.

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

(DATE/DATETIME/TIMESTAMP/STRING, INTERVAL) -&gt; DATETIME

(DATE, LONG) -&gt; DATE

(DATETIME/TIMESTAMP/STRING, LONG) -&gt; DATETIME

Synonyms: [DATE_ADD](#date_add)

Example:

    os> source=people | eval \`ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)\` = ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR), \`ADDDATE(DATE('2020-08-26'), 1)\` = ADDDATE(DATE('2020-08-26'), 1), \`ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)\`, \`ADDDATE(DATE('2020-08-26'), 1)\`, \`ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +------------------------------------------------+----------------------------------+------------------------------------------------+
    | ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)   | ADDDATE(DATE('2020-08-26'), 1)   | ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |------------------------------------------------+----------------------------------+------------------------------------------------|
    | 2020-08-26 01:00:00                            | 2020-08-27                       | 2020-08-27 01:01:01                            |
    +------------------------------------------------+----------------------------------+------------------------------------------------+

### **DATE**

**Description**

Usage: date(expr) constructs a date type with the input string expr as a
date. If the argument is of date/datetime/timestamp, it extracts the
date value part from the expression.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: DATE

Example:

    >od source=people | eval \`DATE('2020-08-26')\` = DATE('2020-08-26'), \`DATE(TIMESTAMP('2020-08-26 13:49:00'))\` = DATE(TIMESTAMP('2020-08-26 13:49:00')) | fields \`DATE('2020-08-26')\`, \`DATE(TIMESTAMP('2020-08-26 13:49:00'))\`
    fetched rows / total rows = 1/1
    +----------------------+------------------------------------------+
    | DATE('2020-08-26')   | DATE(TIMESTAMP('2020-08-26 13:49:00'))   |
    |----------------------+------------------------------------------|
    | DATE '2020-08-26'    | DATE '2020-08-26'                        |
    +----------------------+------------------------------------------+

### **DATE_ADD**

**Description**

Usage: date_add(date, INTERVAL expr unit)/ date_add(date, expr) adds
the time interval expr to date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [ADDDATE](#adddate)

Example:

    os> source=people | eval \`DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)\` = DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR), \`DATE_ADD(DATE('2020-08-26'), 1)\` = DATE_ADD(DATE('2020-08-26'), 1), \`DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)\`, \`DATE_ADD(DATE('2020-08-26'), 1)\`, \`DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+
    | DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)   | DATE_ADD(DATE('2020-08-26'), 1)   | DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |-------------------------------------------------+-----------------------------------+-------------------------------------------------|
    | 2020-08-26 01:00:00                             | 2020-08-27                        | 2020-08-27 01:01:01                             |
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+

### **DATE_FORMAT**

**Description**

Usage: date_format(date, format) formats the date argument using the
specifiers in the format argument.

| Specifier | Description                                                                                      |
|-----------|--------------------------------------------------------------------------------------------------|
| %a        | Abbreviated weekday name (Sun..Sat)                                                              |
| %b        | Abbreviated month name (Jan..Dec)                                                                |
| %c        | Month, numeric (0..12)                                                                           |
| %D        | Day of the month with English suffix (0th, 1st, 2nd, 3rd, …)                                     |
| %d        | Day of the month, numeric (00..31)                                                               |
| %e        | Day of the month, numeric (0..31)                                                                |
| %f        | Microseconds (000000..999999)                                                                    |
| %H        | Hour (00..23)                                                                                    |
| %h        | Hour (01..12)                                                                                    |
| %I        | Hour (01..12)                                                                                    |
| %i        | Minutes, numeric (00..59)                                                                        |
| %j        | Day of year (001..366)                                                                           |
| %k        | Hour (0..23)                                                                                     |
| %l        | Hour (1..12)                                                                                     |
| %M        | Month name (January..December)                                                                   |
| %m        | Month, numeric (00..12)                                                                          |
| %p        | AM or PM                                                                                         |
| %r        | Time, 12-hour (hh:mm&#58;ss followed by AM or PM)                                                    |
| %S        | Seconds (00..59)                                                                                 |
| %s        | Seconds (00..59)                                                                                 |
| %T        | Time, 24-hour (hh:mm:ss)                                                                         |
| %U        | Week (00..53), where Sunday is the first day of the week; WEEK() mode 0                          |
| %u        | Week (00..53), where Monday is the first day of the week; WEEK() mode 1                          |
| %V        | Week (01..53), where Sunday is the first day of the week; WEEK() mode 2; used with %X            |
| %v        | Week (01..53), where Monday is the first day of the week; WEEK() mode 3; used with %x            |
| %W        | Weekday name (Sunday..Saturday)                                                                  |
| %w        | Day of the week (0=Sunday..6&#61;Saturday)                                                           |
| %X        | Year for the week where Sunday is the first day of the week, numeric, four digits; used with %V  |
| %x        | Year for the week, where Monday is the first day of the week, numeric, four digits; used with %v |
| %Y        | Year, numeric, four digits                                                                       |
| %y        | Year, numeric (two digits)                                                                       |
| %%        | A literal % character                                                                            |
| %x        | x, for any “x” not listed above                                                                  |

The following table describes the available specifier arguments.

Argument type: STRING/DATE/DATETIME/TIMESTAMP, STRING

Return type: STRING

Example:

    >od source=people | eval \`DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f')\` = DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f'), \`DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')\` = DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r') | fields \`DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f')\`, \`DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')\`
    fetched rows / total rows = 1/1
    +-----------------------------------------------+----------------------------------------------------------------+
    | DATE('1998-01-31 13:14:15.012345', '%T.%f')   | DATE(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')   |
    |-----------------------------------------------+----------------------------------------------------------------|
    | '13:14:15.012345'                             | '1998-Jan-31st 01:14:15 PM'                                    |
    +-----------------------------------------------+----------------------------------------------------------------+

### **DATE_SUB**

**Description**

Usage: date_sub(date, INTERVAL expr unit)/ date_sub(date, expr)
subtracts the time interval expr from date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [SUBDATE](#subdate)

Example:

    os> source=people | eval \`DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)\` = DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY), \`DATE_SUB(DATE('2020-08-26'), 1)\` = DATE_SUB(DATE('2020-08-26'), 1), \`DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)\`, \`DATE_SUB(DATE('2020-08-26'), 1)\`, \`DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+
    | DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)   | DATE_SUB(DATE('2020-08-26'), 1)   | DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |-------------------------------------------------+-----------------------------------+-------------------------------------------------|
    | 2007-12-02                                      | 2020-08-25                        | 2020-08-25 01:01:01                             |
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+

### **DAY**

**Description**

Usage: day(date) extracts the day of the month for date, in the range 1
to 31. The dates with value 0 such as '0000-00-00' or '2008-00-00' are
invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Synonyms: DAYOFMONTH

Example:

    os> source=people | eval \`DAY(DATE('2020-08-26'))\` = DAY(DATE('2020-08-26')) | fields \`DAY(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------+
    | DAY(DATE('2020-08-26'))   |
    |---------------------------|
    | 26                        |
    +---------------------------+

### **DAYNAME**

**Description**

Usage: dayname(date) returns the name of the weekday for date, including
Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: STRING

Example:

    os> source=people | eval \`DAYNAME(DATE('2020-08-26'))\` = DAYNAME(DATE('2020-08-26')) | fields \`DAYNAME(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | DAYNAME(DATE('2020-08-26'))   |
    |-------------------------------|
    | Wednesday                     |
    +-------------------------------+

### **DAYOFMONTH**

**Description**

Usage: dayofmonth(date) extracts the day of the month for date, in the
range 1 to 31. The dates with value 0 such as '0000-00-00' or
'2008-00-00' are invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Synonyms: DAY

Example:

    os> source=people | eval \`DAYOFMONTH(DATE('2020-08-26'))\` = DAYOFMONTH(DATE('2020-08-26')) | fields \`DAYOFMONTH(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +----------------------------------+
    | DAYOFMONTH(DATE('2020-08-26'))   |
    |----------------------------------|
    | 26                               |
    +----------------------------------+

### **DAYOFWEEK**

**Description**

Usage: dayofweek(date) returns the weekday index for date (1 = Sunday, 2
= Monday, …, 7 = Saturday).

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`DAYOFWEEK(DATE('2020-08-26'))\` = DAYOFWEEK(DATE('2020-08-26')) | fields \`DAYOFWEEK(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | DAYOFWEEK(DATE('2020-08-26'))   |
    |---------------------------------|
    | 4                               |
    +---------------------------------+

### **DAYOFYEAR**

**Description**

Usage: dayofyear(date) returns the day of the year for date, in the
range 1 to 366.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`DAYOFYEAR(DATE('2020-08-26'))\` = DAYOFYEAR(DATE('2020-08-26')) | fields \`DAYOFYEAR(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | DAYOFYEAR(DATE('2020-08-26'))   |
    |---------------------------------|
    | 239                             |
    +---------------------------------+

### **FROM_DAYS**

**Description**

Usage: from_days(N) returns the date value given the day number N.

Argument type: INTEGER/LONG

Return type: DATE

Example:

    os> source=people | eval \`FROM_DAYS(733687)\` = FROM_DAYS(733687) | fields \`FROM_DAYS(733687)\`
    fetched rows / total rows = 1/1
    +---------------------+
    | FROM_DAYS(733687)   |
    |---------------------|
    | 2008-10-07          |
    +---------------------+

### **HOUR**

**Description**

Usage: hour(time) extracts the hour value for time. Different from the
time of day value, the time value has a large range and can be greater
than 23, so the return value of hour(time) can be also greater than 23.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`HOUR(TIME('01:02:03'))\` = HOUR(TIME('01:02:03')) | fields \`HOUR(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +--------------------------+
    | HOUR(TIME('01:02:03'))   |
    |--------------------------|
    | 1                        |
    +--------------------------+

### **MAKETIME**

**Description**

Specifications:

1.  MAKETIME(INTEGER, INTEGER, INTEGER) -&gt; DATE

### **MICROSECOND**

**Description**

Usage: microsecond(expr) returns the microseconds from the time or
datetime expression expr as a number in the range from 0 to 999999.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MICROSECOND(TIME('01:02:03.123456'))\` = MICROSECOND(TIME('01:02:03.123456')) | fields \`MICROSECOND(TIME('01:02:03.123456'))\`
    fetched rows / total rows = 1/1
    +----------------------------------------+
    | MICROSECOND(TIME('01:02:03.123456'))   |
    |----------------------------------------|
    | 123456                                 |
    +----------------------------------------+

### **MINUTE**

**Description**

Usage: minute(time) returns the minute for time, in the range 0 to 59.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MINUTE(TIME('01:02:03'))\` =  MINUTE(TIME('01:02:03')) | fields \`MINUTE(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | MINUTE(TIME('01:02:03'))   |
    |----------------------------|
    | 2                          |
    +----------------------------+

### **MONTH**

**Description**

Usage: month(date) returns the month for date, in the range 1 to 12 for
January to December. The dates with value 0 such as '0000-00-00' or
'2008-00-00' are invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MONTH(DATE('2020-08-26'))\` =  MONTH(DATE('2020-08-26')) | fields \`MONTH(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-----------------------------+
    | MONTH(DATE('2020-08-26'))   |
    |-----------------------------|
    | 8                           |
    +-----------------------------+

### **MONTHNAME**

**Description**

Usage: monthname(date) returns the full name of the month for date.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: STRING

Example:

    os> source=people | eval \`MONTHNAME(DATE('2020-08-26'))\` = MONTHNAME(DATE('2020-08-26')) | fields \`MONTHNAME(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | MONTHNAME(DATE('2020-08-26'))   |
    |---------------------------------|
    | August                          |
    +---------------------------------+

### **NOW**

**Description**

Specifications:

1.  NOW() -&gt; DATE

### **QUARTER**

**Description**

Usage: quarter(date) returns the quarter of the year for date, in the
range 1 to 4.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`QUARTER(DATE('2020-08-26'))\` = QUARTER(DATE('2020-08-26')) | fields \`QUARTER(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | QUARTER(DATE('2020-08-26'))   |
    |-------------------------------|
    | 3                             |
    +-------------------------------+

### **SECOND**

**Description**

Usage: second(time) returns the second for time, in the range 0 to 59.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`SECOND(TIME('01:02:03'))\` = SECOND(TIME('01:02:03')) | fields \`SECOND(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | SECOND(TIME('01:02:03'))   |
    |----------------------------|
    | 3                          |
    +----------------------------+

### **SUBDATE**

**Description**

Usage: subdate(date, INTERVAL expr unit)/ subdate(date, expr) subtracts
the time interval expr from date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [DATE_SUB](#date_sub)

Example:

    os> source=people | eval \`SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)\` = SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY), \`SUBDATE(DATE('2020-08-26'), 1)\` = SUBDATE(DATE('2020-08-26'), 1), \`SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)\`, \`SUBDATE(DATE('2020-08-26'), 1)\`, \`SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +------------------------------------------------+----------------------------------+------------------------------------------------+
    | SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)   | SUBDATE(DATE('2020-08-26'), 1)   | SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |------------------------------------------------+----------------------------------+------------------------------------------------|
    | 2007-12-02                                     | 2020-08-25                       | 2020-08-25 01:01:01                            |
    +------------------------------------------------+----------------------------------+------------------------------------------------+

### **TIME**

**Description**

Usage: time(expr) constructs a time type with the input string expr as a
time. If the argument is of date/datetime/time/timestamp, it extracts
the time value part from the expression.

Argument type: STRING/DATE/DATETIME/TIME/TIMESTAMP

Return type: TIME

Example:

    >od source=people | eval \`TIME('13:49:00')\` = TIME('13:49:00'), \`TIME(TIMESTAMP('2020-08-26 13:49:00'))\` = TIME(TIMESTAMP('2020-08-26 13:49:00')) | fields \`TIME('13:49:00')\`, \`TIME(TIMESTAMP('2020-08-26 13:49:00'))\`
    fetched rows / total rows = 1/1
    +--------------------+------------------------------------------+
    | TIME('13:49:00')   | TIME(TIMESTAMP('2020-08-26 13:49:00'))   |
    |--------------------+------------------------------------------|
    | TIME '13:49:00'    | TIME '13:49:00'                          |
    +--------------------+------------------------------------------+

### **TIME_TO_SEC**

**Description**

Usage: time_to_sec(time) returns the time argument, converted to
seconds.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: LONG

Example:

    os> source=people | eval \`TIME_TO_SEC(TIME('22:23:00'))\` = TIME_TO_SEC(TIME('22:23:00')) | fields \`TIME_TO_SEC(TIME('22:23:00'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | TIME_TO_SEC(TIME('22:23:00'))   |
    |---------------------------------|
    | 80580                           |
    +---------------------------------+

### **TIMESTAMP**

**Description**

Usage: timestamp(expr) construct a timestamp type with the input string
expr as an timestamp. If the argument is of date/datetime/timestamp
type, cast expr to timestamp type with default timezone UTC.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: TIMESTAMP

Example:

    >od source=people | eval \`TIMESTAMP('2020-08-26 13:49:00')\` = TIMESTAMP('2020-08-26 13:49:00') | fields \`TIMESTAMP('2020-08-26 13:49:00')\`
    fetched rows / total rows = 1/1
    +------------------------------------+
    | TIMESTAMP('2020-08-26 13:49:00')   |
    |------------------------------------|
    | TIMESTAMP '2020-08-26 13:49:00     |
    +------------------------------------+

### **TO_DAYS**

**Description**

Usage: to_days(date) returns the day number (the number of days since
year 0) of the given date. Returns NULL if date is invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: LONG

Example:

    os> source=people | eval \`TO_DAYS(DATE('2008-10-07'))\` = TO_DAYS(DATE('2008-10-07')) | fields \`TO_DAYS(DATE('2008-10-07'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | TO_DAYS(DATE('2008-10-07'))   |
    |-------------------------------|
    | 733687                        |
    +-------------------------------+

### **WEEK**

**Description**

Usage: week(date[, mode]) returns the week number for date. If the
mode argument is omitted, the default mode 0 is used.

| Mode | First day of week | Range | Week 1 is the first week …    |
|------|-------------------|-------|-------------------------------|
| 0    | Sunday            | 0-53  | with a Sunday in this year    |
| 1    | Monday            | 0-53  | with 4 or more days this year |
| 2    | Sunday            | 1-53  | with a Sunday in this year    |
| 3    | Monday            | 1-53  | with 4 or more days this year |
| 4    | Sunday            | 0-53  | with 4 or more days this year |
| 5    | Monday            | 0-53  | with a Monday in this year    |
| 6    | Sunday            | 1-53  | with 4 or more days this year |
| 7    | Monday            | 1-53  | with a Monday in this year    |

The following table describes how the mode argument works.

Argument type: DATE/DATETIME/TIMESTAMP/STRING

Return type: INTEGER

Example:

    >od source=people | eval \`WEEK(DATE('2008-02-20'))\` = WEEK(DATE('2008-02-20')), \`WEEK(DATE('2008-02-20'), 1)\` = WEEK(DATE('2008-02-20'), 1) | fields \`WEEK(DATE('2008-02-20'))\`, \`WEEK(DATE('2008-02-20'), 1)\`
    fetched rows / total rows = 1/1
    +----------------------------+-------------------------------+
    | WEEK(DATE('2008-02-20'))   | WEEK(DATE('2008-02-20'), 1)   |
    |----------------------------|-------------------------------|
    | 7                          | 8                             |
    +----------------------------+-------------------------------+

### **YEAR**

**Description**

Usage: year(date) returns the year for date, in the range 1000 to 9999,
or 0 for the “zero” date.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`YEAR(DATE('2020-08-26'))\` = YEAR(DATE('2020-08-26')) | fields \`YEAR(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | YEAR(DATE('2020-08-26'))   |
    |----------------------------|
    | 2020                       |
    +----------------------------+
",
                      },
                      Object {
                        "label": "String",
                        "value": "## String
---

### CONCAT

**Description**

Usage: CONCAT(str1, str2) returns str1 and str strings concatenated
together.

Argument type: STRING, STRING

Return type: STRING

Example:

    os> source=people | eval \`CONCAT('hello', 'world')\` = CONCAT('hello', 'world') | fields \`CONCAT('hello', 'world')\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | CONCAT('hello', 'world')   |
    |----------------------------|
    | helloworld                 |
    +----------------------------+

### CONCAT_WS

**Description**

Usage: CONCAT_WS(sep, str1, str2) returns str1 concatenated with str2
using sep as a separator between them.

Argument type: STRING, STRING, STRING

Return type: STRING

Example:

    os> source=people | eval \`CONCAT_WS(',', 'hello', 'world')\` = CONCAT_WS(',', 'hello', 'world') | fields \`CONCAT_WS(',', 'hello', 'world')\`
    fetched rows / total rows = 1/1
    +------------------------------------+
    | CONCAT_WS(',', 'hello', 'world')   |
    |------------------------------------|
    | hello,world                        |
    +------------------------------------+

### LENGTH

**Description**

Specifications:

1.  LENGTH(STRING) -&gt; INTEGER

Usage: length(str) returns length of string measured in bytes.

Argument type: STRING

Return type: INTEGER

Example:

    os> source=people | eval \`LENGTH('helloworld')\` = LENGTH('helloworld') | fields \`LENGTH('helloworld')\`
    fetched rows / total rows = 1/1
    +------------------------+
    | LENGTH('helloworld')   |
    |------------------------|
    | 10                     |
    +------------------------+

### LIKE

**Description**

Usage: like(string, PATTERN) return true if the string match the
PATTERN.

There are two wildcards often used in conjunction with the LIKE
operator:

-   \`%\` - The percent sign represents zero, one, or multiple characters
-   \`_\` - The underscore represents a single character

Example:

    os> source=people | eval \`LIKE('hello world', '_ello%')\` = LIKE('hello world', '_ello%') | fields \`LIKE('hello world', '_ello%')\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | LIKE('hello world', '_ello%')   |
    |---------------------------------|
    | True                            |
    +---------------------------------+

### LOWER

**Description**

Usage: lower(string) converts the string to lowercase.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`LOWER('helloworld')\` = LOWER('helloworld'), \`LOWER('HELLOWORLD')\` = LOWER('HELLOWORLD') | fields \`LOWER('helloworld')\`, \`LOWER('HELLOWORLD')\`
    fetched rows / total rows = 1/1
    +-----------------------+-----------------------+
    | LOWER('helloworld')   | LOWER('HELLOWORLD')   |
    |-----------------------+-----------------------|
    | helloworld            | helloworld            |
    +-----------------------+-----------------------+

### LTRIM

**Description**

Usage: ltrim(str) trims leading space characters from the string.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`LTRIM('   hello')\` = LTRIM('   hello'), \`LTRIM('hello   ')\` = LTRIM('hello   ') | fields \`LTRIM('   hello')\`, \`LTRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +---------------------+---------------------+
    | LTRIM('   hello')   | LTRIM('hello   ')   |
    |---------------------+---------------------|
    | hello               | hello               |
    +---------------------+---------------------+

### RIGHT

**Description**

Usage: right(str, len) returns the rightmost len characters from the
string str, or NULL if any argument is NULL.

Argument type: STRING, INTEGER

Return type: STRING

Example:

    os> source=people | eval \`RIGHT('helloworld', 5)\` = RIGHT('helloworld', 5), \`RIGHT('HELLOWORLD', 0)\` = RIGHT('HELLOWORLD', 0) | fields \`RIGHT('helloworld', 5)\`, \`RIGHT('HELLOWORLD', 0)\`
    fetched rows / total rows = 1/1
    +--------------------------+--------------------------+
    | RIGHT('helloworld', 5)   | RIGHT('HELLOWORLD', 0)   |
    |--------------------------+--------------------------|
    | world                    |                          |
    +--------------------------+--------------------------+

### RTRIM

**Description**

Usage: rtrim(str) trims trailing space characters from the string.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`RTRIM('   hello')\` = RTRIM('   hello'), \`RTRIM('hello   ')\` = RTRIM('hello   ') | fields \`RTRIM('   hello')\`, \`RTRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +---------------------+---------------------+
    | RTRIM('   hello')   | RTRIM('hello   ')   |
    |---------------------+---------------------|
    |    hello            | hello               |
    +---------------------+---------------------+

### SUBSTRING

**Description**

Usage: substring(str, start) or substring(str, start, length) returns
substring using start and length. With no length, entire string from
start is returned.

Argument type: STRING, INTEGER, INTEGER

Return type: STRING

Synonyms: SUBSTR

Example:

    os> source=people | eval \`SUBSTRING('helloworld', 5)\` = SUBSTRING('helloworld', 5), \`SUBSTRING('helloworld', 5, 3)\` = SUBSTRING('helloworld', 5, 3) | fields \`SUBSTRING('helloworld', 5)\`, \`SUBSTRING('helloworld', 5, 3)\`
    fetched rows / total rows = 1/1
    +------------------------------+---------------------------------+
    | SUBSTRING('helloworld', 5)   | SUBSTRING('helloworld', 5, 3)   |
    |------------------------------+---------------------------------|
    | oworld                       | owo                             |
    +------------------------------+---------------------------------+

### TRIM

**Description**

Argument Type: STRING

Return type: STRING

Example:

    os> source=people | eval \`TRIM('   hello')\` = TRIM('   hello'), \`TRIM('hello   ')\` = TRIM('hello   ') | fields \`TRIM('   hello')\`, \`TRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +--------------------+--------------------+
    | TRIM('   hello')   | TRIM('hello   ')   |
    |--------------------+--------------------|
    | hello              | hello              |
    +--------------------+--------------------+

### UPPER

**Description**

Usage: upper(string) converts the string to uppercase.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`UPPER('helloworld')\` = UPPER('helloworld'), \`UPPER('HELLOWORLD')\` = UPPER('HELLOWORLD') | fields \`UPPER('helloworld')\`, \`UPPER('HELLOWORLD')\`
    fetched rows / total rows = 1/1
    +-----------------------+-----------------------+
    | UPPER('helloworld')   | UPPER('HELLOWORLD')   |
    |-----------------------+-----------------------|
    | HELLOWORLD            | HELLOWORLD            |
    +-----------------------+-----------------------+
",
                      },
                      Object {
                        "label": "Condition",
                        "value": "## Condition
---

### Description

Usage: isnull(field) return true if field is null.

Argument type: all the supported data type.

Return type: BOOLEAN

Example:

    os> source=accounts | eval result = isnull(employer) | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | False    | Pyrami     | Amber       |
    | False    | Netagy     | Hattie      |
    | False    | Quility    | Nanette     |
    | True     | null       | Dale        |
    +----------+------------+-------------+

### **ISNOTNULL**

**Description**

Usage: isnotnull(field) return true if field is not null.

Argument type: all the supported data type.

Return type: BOOLEAN

Example:

    os> source=accounts | where not isnotnull(employer) | fields account_number, employer
    fetched rows / total rows = 1/1
    +------------------+------------+
    | account_number   | employer   |
    |------------------+------------|
    | 18               | null       |
    +------------------+------------+

### **EXISTS**

[Because OpenSearch doesn't differentiate null and
missing](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html).
so we can't provide function like ismissing/isnotmissing to test field
exist or not. But you can still use isnull/isnotnull for such purpose.

Example, the account 13 doesn't have email field:

    os> source=accounts | where isnull(email) | fields account_number, email
    fetched rows / total rows = 1/1
    +------------------+---------+
    | account_number   | email   |
    |------------------+---------|
    | 13               | null    |
    +------------------+---------+

### **IFNULL**

**Description**

Usage: ifnull(field1, field2) return field2 if field1 is null.

Argument type: all the supported data type, (NOTE : if two parameters
has different type, you will fail semantic check.)

Return type: any

Example:

    os> source=accounts | eval result = ifnull(employer, 'default') | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | Pyrami   | Pyrami     | Amber       |
    | Netagy   | Netagy     | Hattie      |
    | Quility  | Quility    | Nanette     |
    | default  | null       | Dale        |
    +----------+------------+-------------+

### **NULLIF**

**Description**

Usage: nullif(field1, field2) return null if two parameters are same,
otherwiser return field1.

Argument type: all the supported data type, (NOTE : if two parameters
has different type, if two parameters has different type, you will fail
semantic check)

Return type: any

Example:

    os> source=accounts | eval result = nullif(employer, 'Pyrami') | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | null     | Pyrami     | Amber       |
    | Netagy   | Netagy     | Hattie      |
    | Quility  | Quility    | Nanette     |
    | null     | null       | Dale        |
    +----------+------------+-------------+

### **ISNULL**

**Description**

Usage: isnull(field1, field2) return null if two parameters are same,
otherwise return field1.

Argument type: all the supported data type

Return type: any

Example:

    os> source=accounts | eval result = isnull(employer) | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | False    | Pyrami     | Amber       |
    | False    | Netagy     | Hattie      |
    | False    | Quility    | Nanette     |
    | True     | null       | Dale        |
    +----------+------------+-------------+

### **IF**

**Description**

Usage: if(condition, expr1, expr2) return expr1 if condition is true,
otherwiser return expr2.

Argument type: all the supported data type, (NOTE : if expr1 and expr2
are different type, you will fail semantic check

Return type: any

Example:

    os> source=accounts | eval result = if(true, firstname, lastname) | fields result, firstname, lastname
    fetched rows / total rows = 4/4
    +----------+-------------+------------+
    | result   | firstname   | lastname   |
    |----------+-------------+------------|
    | Amber    | Amber       | Duke       |
    | Hattie   | Hattie      | Bond       |
    | Nanette  | Nanette     | Bates      |
    | Dale     | Dale        | Adams      |
    +----------+-------------+------------+

    os> source=accounts | eval result = if(false, firstname, lastname) | fields result, firstname, lastname
    fetched rows / total rows = 4/4
    +----------+-------------+------------+
    | result   | firstname   | lastname   |
    |----------+-------------+------------|
    | Duke     | Amber       | Duke       |
    | Bond     | Hattie      | Bond       |
    | Bates    | Nanette     | Bates      |
    | Adams    | Dale        | Adams      |
    +----------+-------------+------------+
",
                      },
                      Object {
                        "label": "Full Text Search",
                        "value": "## Full Text Search
---

The full text search based functions enable users to search the index for
documents by the full text search of the input query. The functions are built
on the top of the search queries of the OpenSearch engine, but in memory
execution within the plugin is not supported. These functions are able
to perform the global filter of a query, for example the condition
expression in a \`WHERE\` clause or in a \`HAVING\` clause. For more details
of the full text search based search, check out the design here: [Relevance
Based Search With SQL/PPL Query
Engine](https://github.com/opensearch-project/sql/issues/182)

### MATCH

**Description**

\`match(field_expression, query_expression[, option=<option_value>]*)\`

The match function maps to the match query used in search engine, to
return the documents that match a provided text, number, date or boolean
value with a given field. Available parameters include:

-   analyzer
-   auto_generate_synonyms_phrase
-   fuzziness
-   max_expansions
-   prefix_length
-   fuzzy_transpositions
-   fuzzy_rewrite
-   lenient
-   operator
-   minimum_should_match
-   zero_terms_query
-   boost

Example with only \`field\` and \`query\` expressions, and all other
parameters are set default values:

    os> source=accounts | where match(address, 'Street') | fields lastname, address;
    fetched rows / total rows = 2/2
    +------------+--------------------+
    | lastname   | address            |
    |------------+--------------------|
    | Bond       | 671 Bristol Street |
    | Bates      | 789 Madison Street |
    +------------+--------------------+

Another example to show how to set custom values for the optional
parameters:

    os> source=accounts | where match(firstname, 'Hattie', operator='AND', boost=2.0) | fields lastname;
    fetched rows / total rows = 1/1
    +------------+
    | lastname   |
    |------------|
    | Bond       |
    +------------+

### Limitations

The full text search functions are available to execute only in OpenSearch DSL
but not in memory as of now, so the full text search might fail for
queries that are too complex to translate into DSL if the full text search
function is following after a complex PPL query. To make your queries
always work-able, it is recommended to place the full text search commands as
close to the search command as possible, to ensure the full text search
functions are eligible to push down. For example, a complex query like
\`search source = people | rename firstname as name | dedup account_number | fields name, account_number, balance, employer | where match(employer, 'Open Search') | stats count() by city\`
could fail because it is difficult to translate to DSL, but it would be
better if we rewrite it to an equivalent query as
\`search source = people | where match(employer, 'Open Search') | rename firstname as name | dedup account_number | fields name, account_number, balance, employer | stats count() by city\`
by moving the where command with full text search function to the second
command right after the search command, and the full text search would be
optimized and executed smoothly in OpenSearch DSL. See [Optimization](https://github.com/opensearch-project/sql/blob/22924b13d9cb46759c8d213a7ce903effe06ab47/docs/user/optimization/optimization.rst)
to get more details about the query engine optimization.
",
                      },
                    ],
                  },
                  Object {
                    "label": "Language Structure",
                    "options": Array [
                      Object {
                        "label": "Identifiers",
                        "value": "## Indentifiers
---

### **Introduction**

Identifiers are used for naming your database objects, such as index
name, field name, customLabel etc. Basically there are two types of
identifiers: regular identifiers and delimited identifiers.

### **Regular Identifiers**

**Description**

A regular identifier is a string of characters that must start with
ASCII letter (lower or upper case). The subsequent character can be a
combination of letter, digit, underscore (\`_\`). It cannot be a reversed
key word. And whitespace and other special characters are not allowed.

For OpenSearch, the following identifiers are supported extensionally:

1.  Identifiers prefixed by dot \`.\`: this is called hidden index in
    OpenSearch, for example \`.opensearch_dashboards\`.
2.  Identifiers prefixed by at sign \`@\`: this is common for meta fields
    generated in Logstash ingestion.
3.  Identifiers with \`-\` in the middle: this is mostly the case for
    index name with date information.
4.  Identifiers with star \`*\` present: this is mostly an index pattern
    for wildcard match.

Index name with date suffix separated by dash or dots, such as
\`cwl-2020.01.11\` or \`logs-7.0-2020.01.11\`, is common for those created
by Logstash or FileBeat ingestion. So, this kind of identifier used as
index name is also supported without the need of being quoted for user
convenience. In this case, wildcard within date pattern is also allowed
to search for data across indices of different date range. For example,
you can use \`logs-2020.1*\` to search in indices for October, November
and December 2020.

#### **Examples**

Here are examples for using index pattern directly without quotes:

    os> source=accounts | fields account_number, firstname, lastname;
    fetched rows / total rows = 4/4
    +------------------+-------------+------------+
    | account_number   | firstname   | lastname   |
    |------------------+-------------+------------|
    | 1                | Amber       | Duke       |
    | 6                | Hattie      | Bond       |
    | 13               | Nanette     | Bates      |
    | 18               | Dale        | Adams      |
    +------------------+-------------+------------+

### **Delimited Identifiers**

**Description**

A delimited identifier is an identifier enclosed in back ticks \`\`. In
this case, the identifier enclosed is not necessarily a regular
identifier. In other words, it can contain any special character not
allowed by regular identifier.

#### **Use Cases**

Here are typical examples of the use of delimited identifiers:

1.  Identifiers of reserved key word name
2.  Identifiers with dot \`.\` present: similarly as \`-\` in index name to
    include date information, it is required to be quoted so parser can
    differentiate it from identifier with qualifiers.
3.  Identifiers with other special character: OpenSearch has its own
    rule which allows more special character, for example Unicode
    character is supported in index name.

#### **Examples**

Here are examples for quoting an index name by back ticks:

    os> source=\`accounts\` | fields \`account_number\`;
    fetched rows / total rows = 4/4
    +------------------+
    | account_number   |
    |------------------|
    | 1                |
    | 6                |
    | 13               |
    | 18               |
    +------------------+

### **Case Sensitivity**

**Description**

Identifiers are treated in case sensitive manner. So it must be exactly
same as what is stored in OpenSearch.

### **Examples**

For example, if you run \`source=Accounts\`, it will end up with an index
not found exception from our plugin because the actual index name is
under lower case.
",
                      },
                      Object {
                        "label": "Data Types",
                        "value": "## Data Types
---
### **Overview**

### PPL Data Types

The PPL support the following data types.

| PPL Data Type |
|---------------|
| boolean       |
| byte          |
| short         |
| integer       |
| long          |
| float         |
| double        |
| string        |
| text          |
| timestamp     |
| datetime      |
| date          |
| time          |
| interval      |
| ip            |
| geo_point    |
| binary        |
| struct        |
| array         |

### Data Types Mapping

The table below list the mapping between OpenSearch Data Type, PPL Data
Type and SQL Type.

| OpenSearch Type | PPL Type  | SQL Type  |
|-----------------|-----------|-----------|
| boolean         | boolean   | BOOLEAN   |
| byte            | byte      | TINYINT   |
| short           | byte      | SMALLINT  |
| integer         | integer   | INTEGER   |
| long            | long      | BIGINT    |
| float           | float     | REAL      |
| half_float     | float     | FLOAT     |
| scaled_float   | float     | DOUBLE    |
| double          | double    | DOUBLE    |
| keyword         | string    | VARCHAR   |
| text            | text      | VARCHAR   |
| date            | timestamp | TIMESTAMP |
| ip              | ip        | VARCHAR   |
| date            | timestamp | TIMESTAMP |
| binary          | binary    | VARBINARY |
| object          | struct    | STRUCT    |
| nested          | array     | STRUCT    |

Notes: Not all the PPL Type has correspond OpenSearch Type. e.g. data
and time. To use function which required such data type, user should
explict convert the data type.

### **Numeric Data Types**

Numeric values ranged from -2147483648 to +2147483647 are recognized as
integer with type name \`INTEGER\`. For others outside the range, \`LONG\`
integer will be the data type after parsed.

### **Date and Time Data Types**

The date and time data types are the types that represent temporal
values and PPL plugin supports types including DATE, TIME, DATETIME,
TIMESTAMP and INTERVAL. By default, the OpenSearch DSL uses date type as
the only date and time related type, which has contained all information
about an absolute time point. To integrate with PPL language, each of
the types other than timestamp is holding part of temporal or timezone
information, and the usage to explicitly clarify the date and time types
is reflected in the datetime functions (see [Functions](functions.rst)
for details), where some functions might have restrictions in the input
argument type.

#### **Date**

Date represents the calendar date regardless of the time zone. A given
date value represents a 24-hour period, or say a day, but this period
varies in different timezones and might have flexible hours during
Daylight Savings Time programs. Besides, the date type does not contain
time information as well. The supported range is '1000-01-01' to
'9999-12-31'.

| Type | Syntax       | Range                        |
|------|--------------|------------------------------|
| Date | 'yyyy-MM-dd' | '0001-01-01' to '9999-12-31' |

#### **Time**

Time represents the time on the clock or watch with no regard for which
timezone it might be related with. Time type data does not have date
information.

| Type | Syntax                  | Range                                  |
|------|-------------------------|----------------------------------------|
| Time | 'hh:mm&#58;ss[.fraction]' | '00:00:00.000000' to '23:59:59.999999' |

#### **Datetime**

Datetime type is the combination of date and time. The conversion rule
of date or time to datetime is described in [Conversion between date and
time types](#conversion-between-date-and-time-types). Datetime type does
not contain timezone information. For an absolute time point that
contains both date time and timezone information, see
[Timestamp](#timestamp).

| Type     | Syntax                             | Range                                                        |
|----------|------------------------------------|--------------------------------------------------------------|
| Datetime | 'yyyy-MM-dd hh:mm&#58;ss[.fraction]' | '0001-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999' |

#### **Timestamp**

A timestamp instance is an absolute instant independent of timezone or
convention. For example, for a given point of time, if we set the
timestamp of this time point into another timezone, the value should
also be different accordingly. Besides, the storage of timestamp type is
also different from the other types. The timestamp is converted from the
current timezone to UTC for storage, and is converted back to the set
timezone from UTC when retrieving.

| Type      | Syntax                             | Range                                                            |
|-----------|------------------------------------|------------------------------------------------------------------|
| Timestamp | 'yyyy-MM-dd hh:mm&#58;ss[.fraction]' | '0001-01-01 00:00&#58;01.000000' UTC to '9999-12-31 23:59:59.999999' |

####  **Interval**

Interval data type represents a temporal duration or a period. The
syntax is as follows:

| Type     | Syntax             |
|----------|--------------------|
| Interval | INTERVAL expr unit |

The expr is any expression that can be iterated to a quantity value
eventually, see [Expressions](expressions.rst) for details. The unit
represents the unit for interpreting the quantity, including
MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER and
YEAR.The INTERVAL keyword and the unit specifier are not case sensitive.
Note that there are two classes of intervals. Year-week intervals can
store years, quarters, months and weeks. Day-time intervals can store
days, hours, minutes, seconds and microseconds. Year-week intervals are
comparable only with another year-week intervals. These two types of
intervals can only comparable with the same type of themselves.

### **Conversion between date and time types**

Basically the date and time types except interval can be converted to
each other, but might suffer some alteration of the value or some
information loss, for example extracting the time value from a datetime
value, or convert a date value to a datetime value and so forth. Here
lists the summary of the conversion rules that PPL plugin supports for
each of the types:

#### **Conversion from DATE**

-   Since the date value does not have any time information, conversion
    to [Time](#time) type is not useful, and will always return a zero
    time value '00:00:00'.
-   Conversion from date to datetime has a data fill-up due to the lack
    of time information, and it attaches the time '00:00:00' to the
    original date by default and forms a datetime instance. For example,
    the result to covert date '2020-08-17' to datetime type is datetime
    '2020-08-17 00:00:00'.
-   Conversion to timestamp is to alternate both the time value and the
    timezone information, and it attaches the zero time value '00:00:00'
    and the session timezone (UTC by default) to the date. For example,
    the result to covert date '2020-08-17' to datetime type with session
    timezone UTC is datetime '2020-08-17 00:00:00' UTC.

#### **Conversion from TIME**

-   Time value cannot be converted to any other date and time types
    since it does not contain any date information, so it is not
    meaningful to give no date info to a date/datetime/timestamp
    instance.

#### **Conversion from DATETIME**

-   Conversion from datetime to date is to extract the date part from
    the datetime value. For example, the result to convert datetime
    '2020-08-17 14&#58;09&#58;00' to date is date '2020-08-08'.
-   Conversion to time is to extract the time part from the datetime
    value. For example, the result to convert datetime '2020-08-17
    14&#58;09&#58;00' to time is time '14&#58;09&#58;00'.
-   Since the datetime type does not contain timezone information, the
    conversion to timestamp needs to fill up the timezone part with the
    session timezone. For example, the result to convert datetime
    '2020-08-17 14&#58;09&#58;00' with system timezone of UTC, to timestamp is
    timestamp '2020-08-17 14&#58;09&#58;00' UTC.

#### **Conversion from TIMESTAMP**

-   Conversion from timestamp is much more straightforward. To convert
    it to date is to extract the date value, and conversion to time is
    to extract the time value. Conversion to datetime, it will extracts
    the datetime value and leave the timezone information over. For
    example, the result to convert datetime '2020-08-17 14&#58;09&#58;00' UTC to
    date is date '2020-08-17', to time is '14&#58;09&#58;00' and to datetime is
    datetime '2020-08-17 14&#58;09&#58;00'.

### **String Data Types**

A string is a sequence of characters enclosed in either single or double
quotes. For example, both 'text' and \\"text\\" will be treated as string
literal.

### **Query Struct Data Types**

In PPL, the Struct Data Types corresponding to the [Object field type in
OpenSearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html).
The \\".\\" is used as the path selector when access the inner attribute of
the struct data.

#### **Example: People**

There are three fields in test index \`people\`: 1) deep nested object
field \`city\`; 2) object field of array value \`account\`; 3) nested field
\`projects\`:

    {
      \\"mappings\\": {
        \\"properties\\": {
          \\"city\\": {
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"keyword\\"
              },
              \\"location\\": {
                \\"properties\\": {
                  \\"latitude\\": {
                    \\"type\\": \\"double\\"
                  }
                }
              }
            }
          },
          \\"account\\": {
            \\"properties\\": {
              \\"id\\": {
                \\"type\\": \\"keyword\\"
              }
            }
          },
          \\"projects\\": {
            \\"type\\": \\"nested\\",
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"keyword\\"
              }
            }
          }
        }
      }
    }

#### **Example: Employees**

Here is the mapping for test index \`employees_nested\`. Note that field
\`projects\` is a nested field:

    {
      \\"mappings\\": {
        \\"properties\\": {
          \\"id\\": {
            \\"type\\": \\"long\\"
          },
          \\"name\\": {
            \\"type\\": \\"text\\",
            \\"fields\\": {
              \\"keyword\\": {
                \\"type\\": \\"keyword\\",
                \\"ignore_above\\": 256
              }
            }
          },
          \\"projects\\": {
            \\"type\\": \\"nested\\",
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"text\\",
                \\"fields\\": {
                  \\"keyword\\": {
                    \\"type\\": \\"keyword\\"
                  }
                },
                \\"fielddata\\": true
              },
              \\"started_year\\": {
                \\"type\\": \\"long\\"
              }
            }
          },
          \\"title\\": {
            \\"type\\": \\"text\\",
            \\"fields\\": {
              \\"keyword\\": {
                \\"type\\": \\"keyword\\",
                \\"ignore_above\\": 256
              }
            }
          }
        }
      }
    }

Result set:

    {
      \\"employees_nested\\" : [
        {
          \\"id\\" : 3,
          \\"name\\" : \\"Bob Smith\\",
          \\"title\\" : null,
          \\"projects\\" : [
            {
              \\"name\\" : \\"AWS Redshift Spectrum querying\\",
              \\"started_year\\" : 1990
            },
            {
              \\"name\\" : \\"AWS Redshift security\\",
              \\"started_year\\" : 1999
            },
            {
              \\"name\\" : \\"AWS Aurora security\\",
              \\"started_year\\" : 2015
            }
          ]
        },
        {
          \\"id\\" : 4,
          \\"name\\" : \\"Susan Smith\\",
          \\"title\\" : \\"Dev Mgr\\",
          \\"projects\\" : [ ]
        },
        {
          \\"id\\" : 6,
          \\"name\\" : \\"Jane Smith\\",
          \\"title\\" : \\"Software Eng 2\\",
          \\"projects\\" : [
            {
              \\"name\\" : \\"AWS Redshift security\\",
              \\"started_year\\" : 1998
            },
            {
              \\"name\\" : \\"AWS Hello security\\",
              \\"started_year\\" : 2015,
              \\"address\\" : [
                {
                  \\"city\\" : \\"Dallas\\",
                  \\"state\\" : \\"TX\\"
                }
              ]
            }
          ]
        }
      ]
    }

#### **Example 1: Select struct inner attribute**

The example show fetch city (top level), city.name (second level),
city.location.latitude (deeper level) struct type data from people
results.

PPL query:

    os> source=people | fields city, city.name, city.location.latitude;
    fetched rows / total rows = 1/1
    +-----------------------------------------------------+-------------+--------------------------+
    | city                                                | city.name   | city.location.latitude   |
    |-----------------------------------------------------+-------------+--------------------------|
    | {'name': 'Seattle', 'location': {'latitude': 10.5}} | Seattle     | 10.5                     |
    +-----------------------------------------------------+-------------+--------------------------+

#### **Example 2: Group by struct inner attribute**

The example show group by object field inner attribute.

PPL query:

    os> source=people | stats count() by city.name;
    fetched rows / total rows = 1/1
    +-----------+-------------+
    | count()   | city.name   |
    |-----------+-------------|
    | 1         | Seattle     |
    +-----------+-------------+

#### **Example 3: Selecting Field of Array Value**

Select deeper level for object fields of array value which returns the
first element in the array. For example, because inner field
\`accounts.id\` has three values instead of a tuple in this document, the
first entry is returned.:

    os> source = people | fields accounts, accounts.id;
    fetched rows / total rows = 1/1
    +------------+---------------+
    | accounts   | accounts.id   |
    |------------+---------------|
    | {'id': 1}  | 1             |
    +------------+---------------+
",
                      },
                    ],
                  },
                ]
              }
              placeholder="Refer commands, functions and language structures"
              selectedOptions={
                Array [
                  Object {
                    "label": "where",
                    "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                  },
                ]
              }
              singleSelection={false}
              sortMatchesBy="none"
            />
          </EuiFlexItem>
          <EuiFlexItem
            style={
              Object {
                "justifyContent": "center",
              }
            }
          >
            <EuiText
              color="subdued"
              size="s"
            >
              <EuiLink
                external={true}
                href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                target="_blank"
              >
                Learn More
              </EuiLink>
            </EuiText>
          </EuiFlexItem>
        </EuiFlexGroup>
        <EuiSpacer
          size="l"
        />
        <EuiMarkdownFormat>
          ## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+

        </EuiMarkdownFormat>
      </EuiFlyoutBody>
    }
    flyoutFooter={
      <EuiFlyoutFooter>
        <EuiFlexGroup
          gutterSize="s"
          justifyContent="spaceBetween"
        >
          <EuiFlexItem
            grow={false}
          >
            <EuiButton
              onClick={[Function]}
            >
              Close
            </EuiButton>
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlyoutFooter>
    }
    flyoutHeader={
      <EuiFlyoutHeader
        hasBorder={true}
      >
        <EuiTitle
          size="m"
        >
          <h2
            id="pplReferenceFlyout"
          >
            OpenSearch PPL Reference Manual
          </h2>
        </EuiTitle>
      </EuiFlyoutHeader>
    }
  >
    <div>
      <EuiFlyout
        aria-labelledby="pplReferenceFlyout"
        className="observability-flyout"
        onClose={[Function]}
        ownFocus={false}
        size="m"
      >
        <EuiWindowEvent
          event="keydown"
          handler={[Function]}
        />
        <EuiPortal>
          <Portal
            containerInfo={
              <div>
                <div
                  aria-hidden="true"
                  data-aria-hidden="true"
                  data-focus-guard="true"
                  style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                  tabindex="0"
                />
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    aria-labelledby="pplReferenceFlyout"
                    class="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                    role="dialog"
                    tabindex="-1"
                  >
                    <button
                      aria-label="Close this dialog"
                      class="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                      data-test-subj="euiFlyoutCloseButton"
                      type="button"
                    >
                      <svg
                        aria-hidden="true"
                        class="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                        focusable="false"
                        height="16"
                        role="img"
                        viewBox="0 0 16 16"
                        width="16"
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </button>
                    <div
                      class="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                    >
                      <h2
                        class="euiTitle euiTitle--medium"
                        id="pplReferenceFlyout"
                      >
                        OpenSearch PPL Reference Manual
                      </h2>
                    </div>
                    <div
                      class="euiFlyoutBody"
                    >
                      <div
                        class="euiFlyoutBody__overflow"
                        tabindex="0"
                      >
                        <div
                          class="euiFlyoutBody__overflowContent"
                        >
                          <span
                            class="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                          >
                            <div
                              class="euiFlexItem"
                            >
                              <div
                                aria-expanded="false"
                                aria-haspopup="listbox"
                                class="euiComboBox"
                                role="combobox"
                              >
                                <div
                                  class="euiFormControlLayout"
                                >
                                  <div
                                    class="euiFormControlLayout__childrenWrapper"
                                  >
                                    <div
                                      class="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                      data-test-subj="comboBoxInput"
                                      tabindex="-1"
                                    >
                                      <span
                                        class="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                        title="where"
                                        value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                      >
                                        <span
                                          class="euiBadge__content"
                                        >
                                          <span
                                            class="euiBadge__text"
                                          >
                                            where
                                          </span>
                                          <button
                                            aria-label="Remove where from selection in this group"
                                            class="euiBadge__iconButton"
                                            title="Remove where from selection in this group"
                                            type="button"
                                          >
                                            <svg
                                              aria-hidden="true"
                                              class="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                              focusable="false"
                                              height="16"
                                              role="img"
                                              tabindex="-1"
                                              viewBox="0 0 16 16"
                                              width="16"
                                              xmlns="http://www.w3.org/2000/svg"
                                            />
                                          </button>
                                        </span>
                                      </span>
                                      <div
                                        class="euiComboBox__input"
                                        style="font-size: 14px; display: inline-block;"
                                      >
                                        <input
                                          aria-controls=""
                                          data-test-subj="comboBoxSearchInput"
                                          role="textbox"
                                          style="box-sizing: content-box; width: 2px;"
                                          value=""
                                        />
                                        <div
                                          style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                        />
                                      </div>
                                    </div>
                                    <div
                                      class="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                    >
                                      <button
                                        aria-label="Clear input"
                                        class="euiFormControlLayoutClearButton"
                                        data-test-subj="comboBoxClearButton"
                                        type="button"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                          focusable="false"
                                          height="16"
                                          role="img"
                                          viewBox="0 0 16 16"
                                          width="16"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </button>
                                      <button
                                        aria-label="Open list of options"
                                        class="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                        data-test-subj="comboBoxToggleListButton"
                                        type="button"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                          focusable="false"
                                          height="16"
                                          role="img"
                                          viewBox="0 0 16 16"
                                          width="16"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              class="euiFlexItem"
                              style="justify-content: center;"
                            >
                              <div
                                class="euiText euiText--small"
                              >
                                <div
                                  class="euiTextColor euiTextColor--subdued"
                                >
                                  <a
                                    class="euiLink euiLink--primary"
                                    href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                    rel="noopener noreferrer"
                                    target="_blank"
                                  >
                                    Learn More
                                    <svg
                                      aria-hidden="true"
                                      aria-label="External link"
                                      class="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                      focusable="false"
                                      height="16"
                                      role="img"
                                      viewBox="0 0 16 16"
                                      width="16"
                                      xmlns="http://www.w3.org/2000/svg"
                                    />
                                    <span
                                      class="euiScreenReaderOnly"
                                    >
                                      (opens in a new tab or window)
                                    </span>
                                  </a>
                                </div>
                              </div>
                            </div>
                          </span>
                          <div
                            class="euiSpacer euiSpacer--l"
                          />
                          <div
                            class="euiMarkdownFormat"
                          >
                            <div>
                              <h2>
                                where
                              </h2>
                              

                              <hr />
                              

                              <h3>
                                Description
                              </h3>
                              

                              <p>
                                The 
                                <span
                                  class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                >
                                  <code
                                    class="euiCodeBlock__code"
                                  >
                                    where
                                  </code>
                                </span>
                                 command bool-expression to filter the search result. The

                                <span
                                  class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                >
                                  <code
                                    class="euiCodeBlock__code"
                                  >
                                    where
                                  </code>
                                </span>
                                 command only return the result when bool-expression evaluated to
true.
                              </p>
                              

                              <h3>
                                Syntax
                              </h3>
                              

                              <p>
                                where 
                                &lt;
                                boolean-expression
                                &gt;
                              </p>
                              

                              <ul>
                                

                                <li>
                                  bool-expression: optional. any expression which could be evaluated
to boolean value.
                                </li>
                                

                              </ul>
                              

                              <h3>
                                Example 1: Filter result set with condition
                              </h3>
                              

                              <p>
                                The example show fetch all the document from accounts index with .
                              </p>
                              

                              <p>
                                PPL query:
                              </p>
                              

                              <pre>
                                <div
                                  class="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                >
                                  <pre
                                    class="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                    tabindex="-1"
                                  >
                                    <code
                                      class="euiCodeBlock__code"
                                    >
                                      os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                    </code>
                                  </pre>
                                </div>
                              </pre>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      class="euiFlyoutFooter"
                    >
                      <div
                        class="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                      >
                        <div
                          class="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <button
                            class="euiButton euiButton--primary"
                            type="button"
                          >
                            <span
                              class="euiButtonContent euiButton__content"
                            >
                              <span
                                class="euiButton__text"
                              >
                                Close
                              </span>
                            </span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden="true"
                  data-aria-hidden="true"
                  data-focus-guard="true"
                  style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
                  tabindex="0"
                />
              </div>
            }
          >
            <EuiFocusTrap
              clickOutsideDisables={true}
              disabled={false}
              noIsolation={true}
              returnFocus={true}
              scrollLock={false}
            >
              <ForwardRef
                enabled={true}
                noIsolation={true}
                onClickOutside={[Function]}
                returnFocus={true}
                scrollLock={false}
              >
                <ForwardRef
                  enabled={true}
                  noIsolation={true}
                  onClickOutside={[Function]}
                  returnFocus={true}
                  scrollLock={false}
                  sideCar={[Function]}
                >
                  <ForwardRef(FocusLockUI)
                    as={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "classNames": Object {
                          "fullWidth": "width-before-scroll-bar",
                          "zeroRight": "right-scroll-bar-position",
                        },
                        "defaultProps": Object {
                          "enabled": true,
                          "inert": false,
                          "removeScrollBar": true,
                        },
                        "render": [Function],
                      }
                    }
                    autoFocus={true}
                    crossFrame={true}
                    disabled={false}
                    lockProps={
                      Object {
                        "allowPinchZoom": undefined,
                        "as": undefined,
                        "enabled": false,
                        "inert": undefined,
                        "onMouseDown": [Function],
                        "onTouchStart": [Function],
                        "shards": undefined,
                        "sideCar": [Function],
                        "style": undefined,
                      }
                    }
                    noFocusGuards={false}
                    onActivation={[Function]}
                    onDeactivation={[Function]}
                    persistentFocus={false}
                    returnFocus={true}
                    sideCar={[Function]}
                  >
                    <div
                      data-focus-guard={true}
                      key="guard-first"
                      style={
                        Object {
                          "height": "0px",
                          "left": "1px",
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "fixed",
                          "top": "1px",
                          "width": "1px",
                        }
                      }
                      tabIndex={0}
                    />
                    <RequireSideCar
                      autoFocus={true}
                      crossFrame={true}
                      disabled={false}
                      id={Object {}}
                      observed={
                        <div
                          data-focus-lock-disabled="false"
                        >
                          <div
                            aria-labelledby="pplReferenceFlyout"
                            class="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                            role="dialog"
                            tabindex="-1"
                          >
                            <button
                              aria-label="Close this dialog"
                              class="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                              data-test-subj="euiFlyoutCloseButton"
                              type="button"
                            >
                              <svg
                                aria-hidden="true"
                                class="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                focusable="false"
                                height="16"
                                role="img"
                                viewBox="0 0 16 16"
                                width="16"
                                xmlns="http://www.w3.org/2000/svg"
                              />
                            </button>
                            <div
                              class="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                            >
                              <h2
                                class="euiTitle euiTitle--medium"
                                id="pplReferenceFlyout"
                              >
                                OpenSearch PPL Reference Manual
                              </h2>
                            </div>
                            <div
                              class="euiFlyoutBody"
                            >
                              <div
                                class="euiFlyoutBody__overflow"
                                tabindex="0"
                              >
                                <div
                                  class="euiFlyoutBody__overflowContent"
                                >
                                  <span
                                    class="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                                  >
                                    <div
                                      class="euiFlexItem"
                                    >
                                      <div
                                        aria-expanded="false"
                                        aria-haspopup="listbox"
                                        class="euiComboBox"
                                        role="combobox"
                                      >
                                        <div
                                          class="euiFormControlLayout"
                                        >
                                          <div
                                            class="euiFormControlLayout__childrenWrapper"
                                          >
                                            <div
                                              class="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                              data-test-subj="comboBoxInput"
                                              tabindex="-1"
                                            >
                                              <span
                                                class="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                                title="where"
                                                value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                              >
                                                <span
                                                  class="euiBadge__content"
                                                >
                                                  <span
                                                    class="euiBadge__text"
                                                  >
                                                    where
                                                  </span>
                                                  <button
                                                    aria-label="Remove where from selection in this group"
                                                    class="euiBadge__iconButton"
                                                    title="Remove where from selection in this group"
                                                    type="button"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      class="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                      focusable="false"
                                                      height="16"
                                                      role="img"
                                                      tabindex="-1"
                                                      viewBox="0 0 16 16"
                                                      width="16"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    />
                                                  </button>
                                                </span>
                                              </span>
                                              <div
                                                class="euiComboBox__input"
                                                style="font-size: 14px; display: inline-block;"
                                              >
                                                <input
                                                  aria-controls=""
                                                  data-test-subj="comboBoxSearchInput"
                                                  role="textbox"
                                                  style="box-sizing: content-box; width: 2px;"
                                                  value=""
                                                />
                                                <div
                                                  style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                                />
                                              </div>
                                            </div>
                                            <div
                                              class="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                            >
                                              <button
                                                aria-label="Clear input"
                                                class="euiFormControlLayoutClearButton"
                                                data-test-subj="comboBoxClearButton"
                                                type="button"
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                  focusable="false"
                                                  height="16"
                                                  role="img"
                                                  viewBox="0 0 16 16"
                                                  width="16"
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                              </button>
                                              <button
                                                aria-label="Open list of options"
                                                class="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                                data-test-subj="comboBoxToggleListButton"
                                                type="button"
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                  focusable="false"
                                                  height="16"
                                                  role="img"
                                                  viewBox="0 0 16 16"
                                                  width="16"
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                              </button>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      class="euiFlexItem"
                                      style="justify-content: center;"
                                    >
                                      <div
                                        class="euiText euiText--small"
                                      >
                                        <div
                                          class="euiTextColor euiTextColor--subdued"
                                        >
                                          <a
                                            class="euiLink euiLink--primary"
                                            href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                            rel="noopener noreferrer"
                                            target="_blank"
                                          >
                                            Learn More
                                            <svg
                                              aria-hidden="true"
                                              aria-label="External link"
                                              class="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                              focusable="false"
                                              height="16"
                                              role="img"
                                              viewBox="0 0 16 16"
                                              width="16"
                                              xmlns="http://www.w3.org/2000/svg"
                                            />
                                            <span
                                              class="euiScreenReaderOnly"
                                            >
                                              (opens in a new tab or window)
                                            </span>
                                          </a>
                                        </div>
                                      </div>
                                    </div>
                                  </span>
                                  <div
                                    class="euiSpacer euiSpacer--l"
                                  />
                                  <div
                                    class="euiMarkdownFormat"
                                  >
                                    <div>
                                      <h2>
                                        where
                                      </h2>
                                      

                                      <hr />
                                      

                                      <h3>
                                        Description
                                      </h3>
                                      

                                      <p>
                                        The 
                                        <span
                                          class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                        >
                                          <code
                                            class="euiCodeBlock__code"
                                          >
                                            where
                                          </code>
                                        </span>
                                         command bool-expression to filter the search result. The

                                        <span
                                          class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                        >
                                          <code
                                            class="euiCodeBlock__code"
                                          >
                                            where
                                          </code>
                                        </span>
                                         command only return the result when bool-expression evaluated to
true.
                                      </p>
                                      

                                      <h3>
                                        Syntax
                                      </h3>
                                      

                                      <p>
                                        where 
                                        &lt;
                                        boolean-expression
                                        &gt;
                                      </p>
                                      

                                      <ul>
                                        

                                        <li>
                                          bool-expression: optional. any expression which could be evaluated
to boolean value.
                                        </li>
                                        

                                      </ul>
                                      

                                      <h3>
                                        Example 1: Filter result set with condition
                                      </h3>
                                      

                                      <p>
                                        The example show fetch all the document from accounts index with .
                                      </p>
                                      

                                      <p>
                                        PPL query:
                                      </p>
                                      

                                      <pre>
                                        <div
                                          class="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                        >
                                          <pre
                                            class="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                            tabindex="-1"
                                          >
                                            <code
                                              class="euiCodeBlock__code"
                                            >
                                              os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                            </code>
                                          </pre>
                                        </div>
                                      </pre>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              class="euiFlyoutFooter"
                            >
                              <div
                                class="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <div
                                  class="euiFlexItem euiFlexItem--flexGrowZero"
                                >
                                  <button
                                    class="euiButton euiButton--primary"
                                    type="button"
                                  >
                                    <span
                                      class="euiButtonContent euiButton__content"
                                    >
                                      <span
                                        class="euiButton__text"
                                      >
                                        Close
                                      </span>
                                    </span>
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                      onActivation={[Function]}
                      onDeactivation={[Function]}
                      persistentFocus={false}
                      returnFocus={[Function]}
                      shards={Array []}
                      sideCar={
                        Object {
                          "assignMedium": [Function],
                          "assignSyncMedium": [Function],
                          "options": Object {
                            "async": true,
                            "ssr": false,
                          },
                          "read": [Function],
                          "useMedium": [Function],
                        }
                      }
                    >
                      <SideCar
                        autoFocus={true}
                        crossFrame={true}
                        disabled={false}
                        id={Object {}}
                        observed={
                          <div
                            data-focus-lock-disabled="false"
                          >
                            <div
                              aria-labelledby="pplReferenceFlyout"
                              class="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                              role="dialog"
                              tabindex="-1"
                            >
                              <button
                                aria-label="Close this dialog"
                                class="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                                data-test-subj="euiFlyoutCloseButton"
                                type="button"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                  focusable="false"
                                  height="16"
                                  role="img"
                                  viewBox="0 0 16 16"
                                  width="16"
                                  xmlns="http://www.w3.org/2000/svg"
                                />
                              </button>
                              <div
                                class="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                              >
                                <h2
                                  class="euiTitle euiTitle--medium"
                                  id="pplReferenceFlyout"
                                >
                                  OpenSearch PPL Reference Manual
                                </h2>
                              </div>
                              <div
                                class="euiFlyoutBody"
                              >
                                <div
                                  class="euiFlyoutBody__overflow"
                                  tabindex="0"
                                >
                                  <div
                                    class="euiFlyoutBody__overflowContent"
                                  >
                                    <span
                                      class="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                                    >
                                      <div
                                        class="euiFlexItem"
                                      >
                                        <div
                                          aria-expanded="false"
                                          aria-haspopup="listbox"
                                          class="euiComboBox"
                                          role="combobox"
                                        >
                                          <div
                                            class="euiFormControlLayout"
                                          >
                                            <div
                                              class="euiFormControlLayout__childrenWrapper"
                                            >
                                              <div
                                                class="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                                data-test-subj="comboBoxInput"
                                                tabindex="-1"
                                              >
                                                <span
                                                  class="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                                  title="where"
                                                  value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                >
                                                  <span
                                                    class="euiBadge__content"
                                                  >
                                                    <span
                                                      class="euiBadge__text"
                                                    >
                                                      where
                                                    </span>
                                                    <button
                                                      aria-label="Remove where from selection in this group"
                                                      class="euiBadge__iconButton"
                                                      title="Remove where from selection in this group"
                                                      type="button"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        class="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                        focusable="false"
                                                        height="16"
                                                        role="img"
                                                        tabindex="-1"
                                                        viewBox="0 0 16 16"
                                                        width="16"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      />
                                                    </button>
                                                  </span>
                                                </span>
                                                <div
                                                  class="euiComboBox__input"
                                                  style="font-size: 14px; display: inline-block;"
                                                >
                                                  <input
                                                    aria-controls=""
                                                    data-test-subj="comboBoxSearchInput"
                                                    role="textbox"
                                                    style="box-sizing: content-box; width: 2px;"
                                                    value=""
                                                  />
                                                  <div
                                                    style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                                  />
                                                </div>
                                              </div>
                                              <div
                                                class="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                              >
                                                <button
                                                  aria-label="Clear input"
                                                  class="euiFormControlLayoutClearButton"
                                                  data-test-subj="comboBoxClearButton"
                                                  type="button"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                    focusable="false"
                                                    height="16"
                                                    role="img"
                                                    viewBox="0 0 16 16"
                                                    width="16"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                </button>
                                                <button
                                                  aria-label="Open list of options"
                                                  class="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                                  data-test-subj="comboBoxToggleListButton"
                                                  type="button"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    height="16"
                                                    role="img"
                                                    viewBox="0 0 16 16"
                                                    width="16"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                </button>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        class="euiFlexItem"
                                        style="justify-content: center;"
                                      >
                                        <div
                                          class="euiText euiText--small"
                                        >
                                          <div
                                            class="euiTextColor euiTextColor--subdued"
                                          >
                                            <a
                                              class="euiLink euiLink--primary"
                                              href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                              rel="noopener noreferrer"
                                              target="_blank"
                                            >
                                              Learn More
                                              <svg
                                                aria-hidden="true"
                                                aria-label="External link"
                                                class="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                                focusable="false"
                                                height="16"
                                                role="img"
                                                viewBox="0 0 16 16"
                                                width="16"
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                              <span
                                                class="euiScreenReaderOnly"
                                              >
                                                (opens in a new tab or window)
                                              </span>
                                            </a>
                                          </div>
                                        </div>
                                      </div>
                                    </span>
                                    <div
                                      class="euiSpacer euiSpacer--l"
                                    />
                                    <div
                                      class="euiMarkdownFormat"
                                    >
                                      <div>
                                        <h2>
                                          where
                                        </h2>
                                        

                                        <hr />
                                        

                                        <h3>
                                          Description
                                        </h3>
                                        

                                        <p>
                                          The 
                                          <span
                                            class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                          >
                                            <code
                                              class="euiCodeBlock__code"
                                            >
                                              where
                                            </code>
                                          </span>
                                           command bool-expression to filter the search result. The

                                          <span
                                            class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                          >
                                            <code
                                              class="euiCodeBlock__code"
                                            >
                                              where
                                            </code>
                                          </span>
                                           command only return the result when bool-expression evaluated to
true.
                                        </p>
                                        

                                        <h3>
                                          Syntax
                                        </h3>
                                        

                                        <p>
                                          where 
                                          &lt;
                                          boolean-expression
                                          &gt;
                                        </p>
                                        

                                        <ul>
                                          

                                          <li>
                                            bool-expression: optional. any expression which could be evaluated
to boolean value.
                                          </li>
                                          

                                        </ul>
                                        

                                        <h3>
                                          Example 1: Filter result set with condition
                                        </h3>
                                        

                                        <p>
                                          The example show fetch all the document from accounts index with .
                                        </p>
                                        

                                        <p>
                                          PPL query:
                                        </p>
                                        

                                        <pre>
                                          <div
                                            class="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                          >
                                            <pre
                                              class="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                              tabindex="-1"
                                            >
                                              <code
                                                class="euiCodeBlock__code"
                                              >
                                                os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                              </code>
                                            </pre>
                                          </div>
                                        </pre>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                class="euiFlyoutFooter"
                              >
                                <div
                                  class="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                >
                                  <div
                                    class="euiFlexItem euiFlexItem--flexGrowZero"
                                  >
                                    <button
                                      class="euiButton euiButton--primary"
                                      type="button"
                                    >
                                      <span
                                        class="euiButtonContent euiButton__content"
                                      >
                                        <span
                                          class="euiButton__text"
                                        >
                                          Close
                                        </span>
                                      </span>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        }
                        onActivation={[Function]}
                        onDeactivation={[Function]}
                        persistentFocus={false}
                        returnFocus={[Function]}
                        shards={Array []}
                        sideCar={
                          Object {
                            "assignMedium": [Function],
                            "assignSyncMedium": [Function],
                            "options": Object {
                              "async": true,
                              "ssr": false,
                            },
                            "read": [Function],
                            "useMedium": [Function],
                          }
                        }
                      >
                        <SideEffect(FocusWatcher)
                          autoFocus={true}
                          crossFrame={true}
                          disabled={false}
                          id={Object {}}
                          observed={
                            <div
                              data-focus-lock-disabled="false"
                            >
                              <div
                                aria-labelledby="pplReferenceFlyout"
                                class="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                                role="dialog"
                                tabindex="-1"
                              >
                                <button
                                  aria-label="Close this dialog"
                                  class="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                                  data-test-subj="euiFlyoutCloseButton"
                                  type="button"
                                >
                                  <svg
                                    aria-hidden="true"
                                    class="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                    focusable="false"
                                    height="16"
                                    role="img"
                                    viewBox="0 0 16 16"
                                    width="16"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                </button>
                                <div
                                  class="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                                >
                                  <h2
                                    class="euiTitle euiTitle--medium"
                                    id="pplReferenceFlyout"
                                  >
                                    OpenSearch PPL Reference Manual
                                  </h2>
                                </div>
                                <div
                                  class="euiFlyoutBody"
                                >
                                  <div
                                    class="euiFlyoutBody__overflow"
                                    tabindex="0"
                                  >
                                    <div
                                      class="euiFlyoutBody__overflowContent"
                                    >
                                      <span
                                        class="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                                      >
                                        <div
                                          class="euiFlexItem"
                                        >
                                          <div
                                            aria-expanded="false"
                                            aria-haspopup="listbox"
                                            class="euiComboBox"
                                            role="combobox"
                                          >
                                            <div
                                              class="euiFormControlLayout"
                                            >
                                              <div
                                                class="euiFormControlLayout__childrenWrapper"
                                              >
                                                <div
                                                  class="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                                  data-test-subj="comboBoxInput"
                                                  tabindex="-1"
                                                >
                                                  <span
                                                    class="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                                    title="where"
                                                    value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                  >
                                                    <span
                                                      class="euiBadge__content"
                                                    >
                                                      <span
                                                        class="euiBadge__text"
                                                      >
                                                        where
                                                      </span>
                                                      <button
                                                        aria-label="Remove where from selection in this group"
                                                        class="euiBadge__iconButton"
                                                        title="Remove where from selection in this group"
                                                        type="button"
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          class="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                          focusable="false"
                                                          height="16"
                                                          role="img"
                                                          tabindex="-1"
                                                          viewBox="0 0 16 16"
                                                          width="16"
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        />
                                                      </button>
                                                    </span>
                                                  </span>
                                                  <div
                                                    class="euiComboBox__input"
                                                    style="font-size: 14px; display: inline-block;"
                                                  >
                                                    <input
                                                      aria-controls=""
                                                      data-test-subj="comboBoxSearchInput"
                                                      role="textbox"
                                                      style="box-sizing: content-box; width: 2px;"
                                                      value=""
                                                    />
                                                    <div
                                                      style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                                    />
                                                  </div>
                                                </div>
                                                <div
                                                  class="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                >
                                                  <button
                                                    aria-label="Clear input"
                                                    class="euiFormControlLayoutClearButton"
                                                    data-test-subj="comboBoxClearButton"
                                                    type="button"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                      focusable="false"
                                                      height="16"
                                                      role="img"
                                                      viewBox="0 0 16 16"
                                                      width="16"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    />
                                                  </button>
                                                  <button
                                                    aria-label="Open list of options"
                                                    class="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                                    data-test-subj="comboBoxToggleListButton"
                                                    type="button"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                      focusable="false"
                                                      height="16"
                                                      role="img"
                                                      viewBox="0 0 16 16"
                                                      width="16"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    />
                                                  </button>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                        <div
                                          class="euiFlexItem"
                                          style="justify-content: center;"
                                        >
                                          <div
                                            class="euiText euiText--small"
                                          >
                                            <div
                                              class="euiTextColor euiTextColor--subdued"
                                            >
                                              <a
                                                class="euiLink euiLink--primary"
                                                href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                                rel="noopener noreferrer"
                                                target="_blank"
                                              >
                                                Learn More
                                                <svg
                                                  aria-hidden="true"
                                                  aria-label="External link"
                                                  class="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                                  focusable="false"
                                                  height="16"
                                                  role="img"
                                                  viewBox="0 0 16 16"
                                                  width="16"
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                                <span
                                                  class="euiScreenReaderOnly"
                                                >
                                                  (opens in a new tab or window)
                                                </span>
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </span>
                                      <div
                                        class="euiSpacer euiSpacer--l"
                                      />
                                      <div
                                        class="euiMarkdownFormat"
                                      >
                                        <div>
                                          <h2>
                                            where
                                          </h2>
                                          

                                          <hr />
                                          

                                          <h3>
                                            Description
                                          </h3>
                                          

                                          <p>
                                            The 
                                            <span
                                              class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                            >
                                              <code
                                                class="euiCodeBlock__code"
                                              >
                                                where
                                              </code>
                                            </span>
                                             command bool-expression to filter the search result. The

                                            <span
                                              class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                            >
                                              <code
                                                class="euiCodeBlock__code"
                                              >
                                                where
                                              </code>
                                            </span>
                                             command only return the result when bool-expression evaluated to
true.
                                          </p>
                                          

                                          <h3>
                                            Syntax
                                          </h3>
                                          

                                          <p>
                                            where 
                                            &lt;
                                            boolean-expression
                                            &gt;
                                          </p>
                                          

                                          <ul>
                                            

                                            <li>
                                              bool-expression: optional. any expression which could be evaluated
to boolean value.
                                            </li>
                                            

                                          </ul>
                                          

                                          <h3>
                                            Example 1: Filter result set with condition
                                          </h3>
                                          

                                          <p>
                                            The example show fetch all the document from accounts index with .
                                          </p>
                                          

                                          <p>
                                            PPL query:
                                          </p>
                                          

                                          <pre>
                                            <div
                                              class="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                            >
                                              <pre
                                                class="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                                tabindex="-1"
                                              >
                                                <code
                                                  class="euiCodeBlock__code"
                                                >
                                                  os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                                </code>
                                              </pre>
                                            </div>
                                          </pre>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  class="euiFlyoutFooter"
                                >
                                  <div
                                    class="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                  >
                                    <div
                                      class="euiFlexItem euiFlexItem--flexGrowZero"
                                    >
                                      <button
                                        class="euiButton euiButton--primary"
                                        type="button"
                                      >
                                        <span
                                          class="euiButtonContent euiButton__content"
                                        >
                                          <span
                                            class="euiButton__text"
                                          >
                                            Close
                                          </span>
                                        </span>
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          }
                          onActivation={[Function]}
                          onDeactivation={[Function]}
                          persistentFocus={false}
                          returnFocus={[Function]}
                          shards={Array []}
                        >
                          <FocusWatcher
                            autoFocus={true}
                            crossFrame={true}
                            disabled={false}
                            id={Object {}}
                            observed={
                              <div
                                data-focus-lock-disabled="false"
                              >
                                <div
                                  aria-labelledby="pplReferenceFlyout"
                                  class="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                                  role="dialog"
                                  tabindex="-1"
                                >
                                  <button
                                    aria-label="Close this dialog"
                                    class="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                                    data-test-subj="euiFlyoutCloseButton"
                                    type="button"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      class="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                      focusable="false"
                                      height="16"
                                      role="img"
                                      viewBox="0 0 16 16"
                                      width="16"
                                      xmlns="http://www.w3.org/2000/svg"
                                    />
                                  </button>
                                  <div
                                    class="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                                  >
                                    <h2
                                      class="euiTitle euiTitle--medium"
                                      id="pplReferenceFlyout"
                                    >
                                      OpenSearch PPL Reference Manual
                                    </h2>
                                  </div>
                                  <div
                                    class="euiFlyoutBody"
                                  >
                                    <div
                                      class="euiFlyoutBody__overflow"
                                      tabindex="0"
                                    >
                                      <div
                                        class="euiFlyoutBody__overflowContent"
                                      >
                                        <span
                                          class="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                                        >
                                          <div
                                            class="euiFlexItem"
                                          >
                                            <div
                                              aria-expanded="false"
                                              aria-haspopup="listbox"
                                              class="euiComboBox"
                                              role="combobox"
                                            >
                                              <div
                                                class="euiFormControlLayout"
                                              >
                                                <div
                                                  class="euiFormControlLayout__childrenWrapper"
                                                >
                                                  <div
                                                    class="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                                    data-test-subj="comboBoxInput"
                                                    tabindex="-1"
                                                  >
                                                    <span
                                                      class="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                                      title="where"
                                                      value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                    >
                                                      <span
                                                        class="euiBadge__content"
                                                      >
                                                        <span
                                                          class="euiBadge__text"
                                                        >
                                                          where
                                                        </span>
                                                        <button
                                                          aria-label="Remove where from selection in this group"
                                                          class="euiBadge__iconButton"
                                                          title="Remove where from selection in this group"
                                                          type="button"
                                                        >
                                                          <svg
                                                            aria-hidden="true"
                                                            class="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                            focusable="false"
                                                            height="16"
                                                            role="img"
                                                            tabindex="-1"
                                                            viewBox="0 0 16 16"
                                                            width="16"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          />
                                                        </button>
                                                      </span>
                                                    </span>
                                                    <div
                                                      class="euiComboBox__input"
                                                      style="font-size: 14px; display: inline-block;"
                                                    >
                                                      <input
                                                        aria-controls=""
                                                        data-test-subj="comboBoxSearchInput"
                                                        role="textbox"
                                                        style="box-sizing: content-box; width: 2px;"
                                                        value=""
                                                      />
                                                      <div
                                                        style="position: absolute; top: 0px; left: 0px; visibility: hidden; height: 0px; overflow: scroll; white-space: pre; font-family: -webkit-small-control; letter-spacing: normal; text-transform: none;"
                                                      />
                                                    </div>
                                                  </div>
                                                  <div
                                                    class="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                  >
                                                    <button
                                                      aria-label="Clear input"
                                                      class="euiFormControlLayoutClearButton"
                                                      data-test-subj="comboBoxClearButton"
                                                      type="button"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                        focusable="false"
                                                        height="16"
                                                        role="img"
                                                        viewBox="0 0 16 16"
                                                        width="16"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      />
                                                    </button>
                                                    <button
                                                      aria-label="Open list of options"
                                                      class="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                                      data-test-subj="comboBoxToggleListButton"
                                                      type="button"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        class="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                        focusable="false"
                                                        height="16"
                                                        role="img"
                                                        viewBox="0 0 16 16"
                                                        width="16"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      />
                                                    </button>
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                          <div
                                            class="euiFlexItem"
                                            style="justify-content: center;"
                                          >
                                            <div
                                              class="euiText euiText--small"
                                            >
                                              <div
                                                class="euiTextColor euiTextColor--subdued"
                                              >
                                                <a
                                                  class="euiLink euiLink--primary"
                                                  href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                                  rel="noopener noreferrer"
                                                  target="_blank"
                                                >
                                                  Learn More
                                                  <svg
                                                    aria-hidden="true"
                                                    aria-label="External link"
                                                    class="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                                    focusable="false"
                                                    height="16"
                                                    role="img"
                                                    viewBox="0 0 16 16"
                                                    width="16"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                  <span
                                                    class="euiScreenReaderOnly"
                                                  >
                                                    (opens in a new tab or window)
                                                  </span>
                                                </a>
                                              </div>
                                            </div>
                                          </div>
                                        </span>
                                        <div
                                          class="euiSpacer euiSpacer--l"
                                        />
                                        <div
                                          class="euiMarkdownFormat"
                                        >
                                          <div>
                                            <h2>
                                              where
                                            </h2>
                                            

                                            <hr />
                                            

                                            <h3>
                                              Description
                                            </h3>
                                            

                                            <p>
                                              The 
                                              <span
                                                class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                              >
                                                <code
                                                  class="euiCodeBlock__code"
                                                >
                                                  where
                                                </code>
                                              </span>
                                               command bool-expression to filter the search result. The

                                              <span
                                                class="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                              >
                                                <code
                                                  class="euiCodeBlock__code"
                                                >
                                                  where
                                                </code>
                                              </span>
                                               command only return the result when bool-expression evaluated to
true.
                                            </p>
                                            

                                            <h3>
                                              Syntax
                                            </h3>
                                            

                                            <p>
                                              where 
                                              &lt;
                                              boolean-expression
                                              &gt;
                                            </p>
                                            

                                            <ul>
                                              

                                              <li>
                                                bool-expression: optional. any expression which could be evaluated
to boolean value.
                                              </li>
                                              

                                            </ul>
                                            

                                            <h3>
                                              Example 1: Filter result set with condition
                                            </h3>
                                            

                                            <p>
                                              The example show fetch all the document from accounts index with .
                                            </p>
                                            

                                            <p>
                                              PPL query:
                                            </p>
                                            

                                            <pre>
                                              <div
                                                class="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                              >
                                                <pre
                                                  class="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                                  tabindex="-1"
                                                >
                                                  <code
                                                    class="euiCodeBlock__code"
                                                  >
                                                    os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                                  </code>
                                                </pre>
                                              </div>
                                            </pre>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    class="euiFlyoutFooter"
                                  >
                                    <div
                                      class="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                    >
                                      <div
                                        class="euiFlexItem euiFlexItem--flexGrowZero"
                                      >
                                        <button
                                          class="euiButton euiButton--primary"
                                          type="button"
                                        >
                                          <span
                                            class="euiButtonContent euiButton__content"
                                          >
                                            <span
                                              class="euiButton__text"
                                            >
                                              Close
                                            </span>
                                          </span>
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            }
                            onActivation={[Function]}
                            onDeactivation={[Function]}
                            persistentFocus={false}
                            returnFocus={[Function]}
                            shards={Array []}
                          />
                        </SideEffect(FocusWatcher)>
                      </SideCar>
                    </RequireSideCar>
                    <ForwardRef
                      data-focus-lock-disabled={false}
                      enabled={false}
                      inert={false}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onMouseDown={[Function]}
                      onTouchStart={[Function]}
                      removeScrollBar={true}
                      sideCar={[Function]}
                    >
                      <div
                        data-focus-lock-disabled={false}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onScrollCapture={[Function]}
                        onTouchMoveCapture={[Function]}
                        onTouchStart={[Function]}
                        onWheelCapture={[Function]}
                      >
                        <EuiOutsideClickDetector
                          isDisabled={true}
                          onOutsideClick={[Function]}
                        >
                          <div
                            aria-labelledby="pplReferenceFlyout"
                            className="euiFlyout euiFlyout--medium euiFlyout--paddingLarge observability-flyout"
                            onMouseDown={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchStart={[Function]}
                            role="dialog"
                            tabIndex={-1}
                          >
                            <EuiI18n
                              default="Close this dialog"
                              token="euiFlyout.closeAriaLabel"
                            >
                              <EuiButtonIcon
                                aria-label="Close this dialog"
                                className="euiFlyout__closeButton euiFlyout__closeButton--inside"
                                color="text"
                                data-test-subj="euiFlyoutCloseButton"
                                display="empty"
                                iconType="cross"
                                onClick={[Function]}
                              >
                                <button
                                  aria-label="Close this dialog"
                                  className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall euiFlyout__closeButton euiFlyout__closeButton--inside"
                                  data-test-subj="euiFlyoutCloseButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiButtonIcon__icon"
                                    color="inherit"
                                    size="m"
                                    type="cross"
                                  >
                                    <EuiIconEmpty
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      />
                                    </EuiIconEmpty>
                                  </EuiIcon>
                                </button>
                              </EuiButtonIcon>
                            </EuiI18n>
                            <EuiFlyoutHeader
                              hasBorder={true}
                            >
                              <div
                                className="euiFlyoutHeader euiFlyoutHeader--hasBorder"
                              >
                                <EuiTitle
                                  size="m"
                                >
                                  <h2
                                    className="euiTitle euiTitle--medium"
                                    id="pplReferenceFlyout"
                                  >
                                    OpenSearch PPL Reference Manual
                                  </h2>
                                </EuiTitle>
                              </div>
                            </EuiFlyoutHeader>
                            <EuiFlyoutBody>
                              <div
                                className="euiFlyoutBody"
                              >
                                <div
                                  className="euiFlyoutBody__overflow"
                                  tabIndex={0}
                                >
                                  <div
                                    className="euiFlyoutBody__overflowContent"
                                  >
                                    <EuiFlexGroup
                                      component="span"
                                    >
                                      <span
                                        className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                                      >
                                        <EuiFlexItem>
                                          <div
                                            className="euiFlexItem"
                                          >
                                            <EuiComboBox
                                              async={false}
                                              compressed={false}
                                              fullWidth={false}
                                              isClearable={true}
                                              onChange={[Function]}
                                              options={
                                                Array [
                                                  Object {
                                                    "label": "Overview",
                                                    "value": "## Overview
---
Piped Processing Language (PPL), powered by OpenSearch, enables
OpenSearch users with exploration and discovery of, and finding search
patterns in data stored in OpenSearch, using a set of commands delimited
by pipes (|). These are essentially read-only requests to process data
and return results.

Currently, OpenSearch users can query data using either Query DSL or
SQL. Query DSL is powerful and fast. However, it has a steep learning
curve, and was not designed as a human interface to easily create ad hoc
queries and explore user data. SQL allows users to extract and analyze
data in OpenSearch in a declarative manner. OpenSearch now makes its
search and query engine robust by introducing Piped Processing Language
(PPL). It enables users to extract insights from OpenSearch with a
sequence of commands delimited by pipes () syntax. It enables
developers, DevOps engineers, support engineers, site reliability
engineers (SREs), and IT managers to effectively discover and explore
log, monitoring and observability data stored in OpenSearch.

We expand the capabilities of our Workbench, a comprehensive and
integrated visual query tool currently supporting only SQL, to run
on-demand PPL commands, and view and save results as text and JSON. We
also add a new interactive standalone command line tool, the PPL CLI, to
run on-demand PPL commands, and view and save results as text and JSON.

The query start with search command and then flowing a set of command
delimited by pipe ( for example, the following query retrieve firstname
and lastname from accounts if age large than 18.

\`\`\` 
source=accounts
| where age > 18
| fields firstname, lastname
\`\`\`
",
                                                  },
                                                  Object {
                                                    "label": "Commands",
                                                    "options": Array [
                                                      Object {
                                                        "label": "Syntax",
                                                        "value": "## Syntax
---
### Command Order

The PPL query started with \`search\` command to reference a table search
from. All the following command could be in any order. In the following
example, \`search\` command refer the accounts index as the source, then
using fields and where command to do the further processing.

\`\`\` 
search source=accounts
| where age > 18
| fields firstname, lastname
\`\`\`

### Required arguments

Required arguments are shown in angle brackets < >.

### Optional arguments

Optional arguments are enclosed in square brackets [ ].",
                                                      },
                                                      Object {
                                                        "label": "dedup",
                                                        "value": "## dedup
---

### Description

Using 'dedup' command to remove identical document defined by field from
the search result.

### Syntax

dedup [int] &lt;field-list&gt; [keepempty=&lt;bool&gt;]
[consecutive=&lt;bool&gt;]

-   int: optional. The 'dedup' command retains multiple events for each
    combination when you specify &lt;int&gt;. The number for &lt;int&gt;
    must be greater than 0. If you do not specify a number, only the
    first occurring event is kept. All other duplicates are removed from
    the results. **Default:** 1
-   keepempty: optional. if true, keep the document if the any field in
    the field-list has NULL value or field is MISSING. **Default:**
    false.
-   consecutive: optional. If set to true, removes only events with
    duplicate combinations of values that are consecutive. **Default:**
    false.
-   field-list: mandatory. The comma-delimited field list. At least one
    field is required.

### Example 1: Dedup by one field

The example show dedup the document with gender field.

PPL query:

    os> source=accounts | dedup gender | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+

### Example 2: Keep 2 duplicates documents

The example show dedup the document with gender field keep 2
duplication.

PPL query:

    os> source=accounts | dedup 2 gender | fields account_number, gender;
    fetched rows / total rows = 3/3
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 6                | M        |
    | 13               | F        |
    +------------------+----------+

### Example 3: Keep or Ignore the empty field by default

The example show dedup the document by keep null value field.

PPL query:

    os> source=accounts | dedup email keepempty=true | fields account_number, email;
    fetched rows / total rows = 4/4
    +------------------+-----------------------+
    | account_number   | email                 |
    |------------------+-----------------------|
    | 1                | amberduke@pyrami.com  |
    | 6                | hattiebond@netagy.com |
    | 13               | null                  |
    | 18               | daleadams@boink.com   |
    +------------------+-----------------------+

The example show dedup the document by ignore the empty value field.

PPL query:

    os> source=accounts | dedup email | fields account_number, email;
    fetched rows / total rows = 3/3
    +------------------+-----------------------+
    | account_number   | email                 |
    |------------------+-----------------------|
    | 1                | amberduke@pyrami.com  |
    | 6                | hattiebond@netagy.com |
    | 18               | daleadams@boink.com   |
    +------------------+-----------------------+

#### Example 4: Dedup in consecutive document

The example show dedup the consecutive document.

PPL query:

    os> source=accounts | dedup gender consecutive=true | fields account_number, gender;
    fetched rows / total rows = 3/3
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    | 18               | M        |
    +------------------+----------+

#### Limitation
The \`dedup\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                      Object {
                                                        "label": "eval",
                                                        "value": "## eval
---

### Description

The 'eval' command evaluate the expression and append the result to the
search result.

### Syntax

eval &lt;field&gt;=&lt;expression&gt; [\\",\\"
&lt;field&gt;=&lt;expression&gt; ]...

-   field: mandatory. If the field name not exist, a new field is added.
    If the field name already exists, it will be overrided.
-   expression: mandatory. Any expression support by the system.

### Example 1: Create the new field

The example show to create new field doubleAge for each document. The
new doubleAge is the evaluation result of age multiply by 2.

PPL query:

    os> source=accounts | eval doubleAge = age * 2 | fields age, doubleAge ;
    fetched rows / total rows = 4/4
    +-------+-------------+
    | age   | doubleAge   |
    |-------+-------------|
    | 32    | 64          |
    | 36    | 72          |
    | 28    | 56          |
    | 33    | 66          |
    +-------+-------------+

### Example 2: Override the existing field

The example show to override the exist age field with age plus 1.

PPL query:

    os> source=accounts | eval age = age + 1 | fields age ;
    fetched rows / total rows = 4/4
    +-------+
    | age   |
    |-------|
    | 33    |
    | 37    |
    | 29    |
    | 34    |
    +-------+

### Example 3: Create the new field with field defined in eval

The example show to create a new field ddAge with field defined in eval
command. The new field ddAge is the evaluation result of doubleAge
multiply by 2, the doubleAge is defined in the eval command.

PPL query:

    os> source=accounts | eval doubleAge = age * 2, ddAge = doubleAge * 2 | fields age, doubleAge, ddAge ;
    fetched rows / total rows = 4/4
    +-------+-------------+---------+
    | age   | doubleAge   | ddAge   |
    |-------+-------------+---------|
    | 32    | 64          | 128     |
    | 36    | 72          | 144     |
    | 28    | 56          | 112     |
    | 33    | 66          | 132     |
    +-------+-------------+---------+

#### Limitation
The \`eval\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                      Object {
                                                        "label": "fields",
                                                        "value": "## fields
---
### Description

Using \`fields\` command to keep or remove fields from the search result.

### Syntax

fields [+|-] &lt;field-list&gt;

-   index: optional. if the plus (+) is used, only the fields specified
    in the field list will be keep. if the minus (-) is used, all the
    fields specified in the field list will be removed. **Default** +
-   field list: mandatory. comma-delimited keep or remove fields.

### Example 1: Select specified fields from result

The example show fetch account_number, firstname and lastname fields
from search results.

PPL query:

    os> source=accounts | fields account_number, firstname, lastname;
    fetched rows / total rows = 4/4
    +------------------+-------------+------------+
    | account_number   | firstname   | lastname   |
    |------------------+-------------+------------|
    | 1                | Amber       | Duke       |
    | 6                | Hattie      | Bond       |
    | 13               | Nanette     | Bates      |
    | 18               | Dale        | Adams      |
    +------------------+-------------+------------+

### Example 2: Remove specified fields from result

The example show fetch remove account_number field from search results.

PPL query:

    os> source=accounts | fields account_number, firstname, lastname | fields - account_number ;
    fetched rows / total rows = 4/4
    +-------------+------------+
    | firstname   | lastname   |
    |-------------+------------|
    | Amber       | Duke       |
    | Hattie      | Bond       |
    | Nanette     | Bates      |
    | Dale        | Adams      |
    +-------------+------------+
",
                                                      },
                                                      Object {
                                                        "label": "rename",
                                                        "value": "## rename
---
### Description

Using \`rename\` command to rename one or more fields in the search
result.

### Syntax

rename &lt;source-field&gt; AS &lt;target-field&gt;[\\",\\"
&lt;source-field&gt; AS &lt;target-field&gt;]...

-   source-field: mandatory. The name of the field you want to rename.
-   field list: mandatory. The name you want to rename to.

### Example 1: Rename one field

The example show rename one field.

PPL query:

    os> source=accounts | rename account_number as an | fields an;
    fetched rows / total rows = 4/4
    +------+
    | an   |
    |------|
    | 1    |
    | 6    |
    | 13   |
    | 18   |
    +------+

### Example 2: Rename multiple fields

The example show rename multiple fields.

PPL query:

    os> source=accounts | rename account_number as an, employer as emp | fields an, emp;
    fetched rows / total rows = 4/4
    +------+---------+
    | an   | emp     |
    |------+---------|
    | 1    | Pyrami  |
    | 6    | Netagy  |
    | 13   | Quility |
    | 18   | null    |
    +------+---------+

#### Limitation
The \`rename\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                      Object {
                                                        "label": "search",
                                                        "value": "## search 
---

### Description

Using \`search\` command to retrieve document from the index. \`search\`
command could be only used as the first command in the PPL query.

### Syntax

search source=&lt;index&gt; [boolean-expression]

-   search: search keywords, which could be ignore.
-   index: mandatory. search command must specify which index to query
    from.
-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Fetch all the data

The example show fetch all the document from accounts index.

PPL query:

    os> source=accounts;
    fetched rows / total rows = 4/4
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+
    | account_number | firstname | address              | balance | gender | city   | employer | state | age | email                 | lastname |
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+
    | 1              | Amber     | 880 Holmes Lane      | 39225   | M      | Brogan | Pyrami   | IL    | 32  | amberduke@pyrami.com  | Duke     |
    | 6              | Hattie    | 671 Bristol Street   | 5686    | M      | Dante  | Netagy   | TN    | 36  | hattiebond@netagy.com | Bond     |
    | 13             | Nanette   | 789 Madison Street   | 32838   | F      | Nogal  | Quility  | VA    | 28  | null                  | Bates    |
    | 18             | Dale      | 467 Hutchinson Court | 4180    | M      | Orick  | null     | MD    | 33  | daleadams@boink.com   | Adams    |
    +----------------+-----------+----------------------+---------+--------+--------+----------+-------+-----+-----------------------+----------+

### Example 2: Fetch data with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts account_number=1 or gender=\\"F\\";
    fetched rows / total rows = 2/2
    +------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------+
    | account_number   | firstname   | address            | balance   | gender   | city   | employer   | state   | age   | email                | lastname   |
    |------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------|
    | 1                | Amber       | 880 Holmes Lane    | 39225     | M        | Brogan | Pyrami     | IL      | 32    | amberduke@pyrami.com | Duke       |
    | 13               | Nanette     | 789 Madison Street | 32838     | F        | Nogal  | Quility    | VA      | 28    | null                 | Bates      |
    +------------------+-------------+--------------------+-----------+----------+--------+------------+---------+-------+----------------------+------------+
",
                                                      },
                                                      Object {
                                                        "label": "sort",
                                                        "value": "## sort 
---
### Description

Using \`sort\` command to sorts all the search result by the specified
fields.

### Syntax

sort &lt;[+|-] sort-field&gt;...

-   [+|-]: optional. The plus [+] stands for ascending order and
    NULL/MISSING first and a minus [-] stands for descending order and
    NULL/MISSING last. **Default:** ascending order and NULL/MISSING
    first.
-   sort-field: mandatory. The field used to sort.

### Example 1: Sort by one field

The example show sort all the document with age field in ascending
order.

PPL query:

    os> source=accounts | sort age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 13               | 28    |
    | 1                | 32    |
    | 18               | 33    |
    | 6                | 36    |
    +------------------+-------+

### Example 2: Sort by one field return all the result

The example show sort all the document with age field in ascending
order.

PPL query:

    os> source=accounts | sort age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 13               | 28    |
    | 1                | 32    |
    | 18               | 33    |
    | 6                | 36    |
    +------------------+-------+

### Example 3: Sort by one field in descending order

The example show sort all the document with age field in descending
order.

PPL query:

    os> source=accounts | sort - age | fields account_number, age;
    fetched rows / total rows = 4/4
    +------------------+-------+
    | account_number   | age   |
    |------------------+-------|
    | 6                | 36    |
    | 18               | 33    |
    | 1                | 32    |
    | 13               | 28    |
    +------------------+-------+

### Example 4: Sort by multiple field 

The example show sort all the document with gender field in ascending
order and age field in descending.

PPL query:

    os> source=accounts | sort + gender, - age | fields account_number, gender, age;
    fetched rows / total rows = 4/4
    +------------------+----------+-------+
    | account_number   | gender   | age   |
    |------------------+----------+-------|
    | 13               | F        | 28    |
    | 6                | M        | 36    |
    | 18               | M        | 33    |
    | 1                | M        | 32    |
    +------------------+----------+-------+

### Example 5: Sort by field include null value

The example show sort employer field by default option (ascending order
and null first), the result show that null value is in the first row.

PPL query:

    os> source=accounts | sort employer | fields employer;
    fetched rows / total rows = 4/4
    +------------+
    | employer   |
    |------------|
    | null       |
    | Netagy     |
    | Pyrami     |
    | Quility    |
    +------------+
",
                                                      },
                                                      Object {
                                                        "label": "stats",
                                                        "value": "## stats
---

### Description

Using \`stats\` command to calculate the aggregation from search result.

The following table catalogs the aggregation functions and also
indicates how the NULL/MISSING values is handled:

|          |             |             |
|----------|-------------|-------------|
| Function | NULL        | MISSING     |
| COUNT    | Not counted | Not counted |
| SUM      | Ignore      | Ignore      |
| AVG      | Ignore      | Ignore      |
| MAX      | Ignore      | Ignore      |
| MIN      | Ignore      | Ignore      |

### Syntax

stats &lt;aggregation&gt;... [by-clause]...

-   aggregation: mandatory. A aggregation function. The argument of
    aggregation must be field.
-   by-clause: optional. The one or more fields to group the results by.
    **Default**: If no &lt;by-clause&gt; is specified, the stats command
    returns only one row, which is the aggregation over the entire
    result set.

### **Aggregation Functions**
---
### **COUNT**

**Description**

Usage: Returns a count of the number of expr in the rows retrieved by a
SELECT statement.

Example:

    os> source=accounts | stats count();
    fetched rows / total rows = 1/1
    +-----------+
    | count()   |
    |-----------|
    | 4         |
    +-----------+

### **SUM**

**Description**

Usage: SUM(expr). Returns the sum of expr.

Example:

    os> source=accounts | stats sum(age) by gender;
    fetched rows / total rows = 2/2
    +------------+----------+
    | sum(age)   | gender   |
    |------------+----------|
    | 28         | F        |
    | 101        | M        |
    +------------+----------+

### **AVG**

**Description**

Usage: AVG(expr). Returns the average value of expr.

Example:

    os> source=accounts | stats avg(age) by gender;
    fetched rows / total rows = 2/2
    +--------------------+----------+
    | avg(age)           | gender   |
    |--------------------+----------|
    | 28.0               | F        |
    | 33.666666666666664 | M        |
    +--------------------+----------+

### **MAX**

**Description**

Usage: MAX(expr). Returns the maximum value of expr.

Example:

    os> source=accounts | stats max(age);
    fetched rows / total rows = 1/1
    +------------+
    | max(age)   |
    |------------|
    | 36         |
    +------------+

### **MIN**

**Description**

Usage: MIN(expr). Returns the minimum value of expr.

Example:

    os> source=accounts | stats min(age);
    fetched rows / total rows = 1/1
    +------------+
    | min(age)   |
    |------------|
    | 28         |
    +------------+

### **VAR_SAMP**

**Description**

Usage: VAR_SAMP(expr). Returns the sample variance of expr.

Example:

    os> source=accounts | stats var_samp(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | var_samp(age)      |
    |--------------------|
    | 10.916666666666666 |
    +--------------------+

### **VAR_POP**

**Description**

Usage: VAR_POP(expr). Returns the population standard variance of expr.

Example:

    os> source=accounts | stats var_pop(age);
    fetched rows / total rows = 1/1
    +----------------+
    | var_pop(age)   |
    |----------------|
    | 8.1875         |
    +----------------+

### **STDDEV_SAMP**

**Description**

Usage: STDDEV_SAMP(expr). Return the sample standard deviation of expr.

Example:

    os> source=accounts | stats stddev_samp(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | stddev_samp(age)   |
    |--------------------|
    | 3.304037933599835  |
    +--------------------+

### **STDDEV_POP**

**Description**

Usage: STDDEV_POP(expr). Return the population standard deviation of
expr.

Example:

    os> source=accounts | stats stddev_pop(age);
    fetched rows / total rows = 1/1
    +--------------------+
    | stddev_pop(age)    |
    |--------------------|
    | 2.8613807855648994 |
    +--------------------+

### **By Clause**

The by clause could be the fields and expressions like scalar functions
and aggregation functions. Besides, the span clause can also be used in
the by clause to split specific field into buckets in the same interval,
the stats then does the aggregation by these span buckets.

The span syntax is \`span(field_expr, interval_expr)\`, the unit of the
interval expression is the natural unit by default. If the field is a
date and time type field, and the interval is in date/time units, you
will need to specify the unit in the interval expression. For example,
to split the field \`age\` into buckets by 10 years, it looks like
\`span(age, 10)\`. And here is another example of time span, the span to
split a \`timestamp\` field into hourly intervals, it looks like
\`span(timestamp, 1h)\`.

Available time unit:

| Span Interval Units        |
|----------------------------|
| millisecond (ms)           |
| second (s)                 |
| minute (m, case sensitive) |
| hour (h)                   |
| day (d)                    |
| week (w)                   |
| month (M, case sensitive)  |
| quarter (q)                |
| year (y)                   |

### Example 1: Calculate the count of events

The example show calculate the count of events in the accounts.

PPL query:

    os> source=accounts | stats count();
    fetched rows / total rows = 1/1
    +-----------+
    | count()   |
    |-----------|
    | 4         |
    +-----------+

### Example 2: Calculate the average of a field

The example show calculate the average age of all the accounts.

PPL query:

    os> source=accounts | stats avg(age);
    fetched rows / total rows = 1/1
    +------------+
    | avg(age)   |
    |------------|
    | 32.25      |
    +------------+

### Example 3: Calculate the average of a field by group

The example show calculate the average age of all the accounts group by
gender.

PPL query:

    os> source=accounts | stats avg(age) by gender;
    fetched rows / total rows = 2/2
    +--------------------+----------+
    | avg(age)           | gender   |
    |--------------------+----------|
    | 28.0               | F        |
    | 33.666666666666664 | M        |
    +--------------------+----------+

### Example 4: Calculate the average, sum and count of a field by group

The example show calculate the average age, sum age and count of events
of all the accounts group by gender.

PPL query:

    os> source=accounts | stats avg(age), sum(age), count() by gender;
    fetched rows / total rows = 2/2
    +--------------------+------------+-----------+----------+
    | avg(age)           | sum(age)   | count()   | gender   |
    |--------------------+------------+-----------+----------|
    | 28.0               | 28         | 1         | F        |
    | 33.666666666666664 | 101        | 3         | M        |
    +--------------------+------------+-----------+----------+

### Example 5: Calculate the maximum of a field

The example calculates the max age of all the accounts.

PPL query:

    os> source=accounts | stats max(age);
    fetched rows / total rows = 1/1
    +------------+
    | max(age)   |
    |------------|
    | 36         |
    +------------+

### Example 6: Calculate the maximum and minimum of a field by group

The example calculates the max and min age values of all the accounts
group by gender.

PPL query:

    os> source=accounts | stats max(age), min(age) by gender;
    fetched rows / total rows = 2/2
    +------------+------------+----------+
    | max(age)   | min(age)   | gender   |
    |------------+------------+----------|
    | 28         | 28         | F        |
    | 36         | 32         | M        |
    +------------+------------+----------+

### Example 7: Calculate the distinct count of a field

To get the count of distinct values of a field, you can use
\`DISTINCT_COUNT\` (or \`DC\`) function instead of \`COUNT\`. The example
calculates both the count and the distinct count of gender field of all
the accounts.

PPL query:

    os> source=accounts | stats count(gender), distinct_count(gender);
    fetched rows / total rows = 1/1
    +-----------------+--------------------------+
    | count(gender)   | distinct_count(gender)   |
    |-----------------+--------------------------|
    | 4               | 2                        |
    +-----------------+--------------------------+

### Example 8: Calculate the count by a span

The example gets the count of age by the interval of 10 years.

PPL query:

    os> source=accounts | stats count(age) by span(age, 10) as age_span
    fetched rows / total rows = 2/2
    +--------------+------------+
    | count(age)   | age_span   |
    |--------------+------------|
    | 1            | 20         |
    | 3            | 30         |
    +--------------+------------+

### Example 9: Calculate the count by a gender and span

The example gets the count of age by the interval of 10 years and group by gender.

PPL query::

    os> source=accounts | stats count() as cnt by span(age, 5) as age_span, gender
    fetched rows / total rows = 3/3
    +-------+------------+----------+
    | cnt   | age_span   | gender   |
    |-------+------------+----------|
    | 1     | 25         | F        |
    | 2     | 30         | M        |
    | 1     | 35         | M        |
    +-------+------------+----------+
",
                                                      },
                                                      Object {
                                                        "label": "where",
                                                        "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                                                      },
                                                      Object {
                                                        "label": "head",
                                                        "value": "## head
---

### Description

The \`head\` command returns the first N number of specified results in
search order.

### Syntax

head [N]

-   N: optional. number of results to return. **Default:** 10

### Example 1: Get first 10 results

The example show first 10 results from accounts index.

PPL query:

    os> source=accounts | fields firstname, age | head;
    fetched rows / total rows = 10/10
    +---------------+-----------+
    | firstname     | age       |
    |---------------+-----------|
    | Amber         | 32        |
    | Hattie        | 36        |
    | Nanette       | 28        |
    | Dale          | 33        |
    | Elinor        | 36        |
    | Virginia      | 39        |
    | Dillard       | 34        |
    | Mcgee         | 39        |
    | Aurelia       | 37        |
    | Fulton        | 23        |
    +---------------+-----------+

### Example 2: Get first N results

The example show first N results from accounts index.

PPL query:

    os> source=accounts | fields firstname, age | head 3;
    fetched rows / total rows = 3/3
    +---------------+-----------+
    | firstname     | age       |
    |---------------+-----------|
    | Amber         | 32        |
    | Hattie        | 36        |
    | Nanette       | 28        |
    +---------------+-----------+

#### Limitation
The \`head\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                      Object {
                                                        "label": "parse",
                                                        "value": "## parse 
---
### Description

The \`parse\` command parses a text field using a regular expression and append
the result to the search result.

### Syntax

parse &lt;field&gt; &lt;regular-expression&gt;

- field: mandatory. The field must be a text field.
- regular-expression: mandatory. The regular expression used to extract new
fields from given text field. If a new field name already exists, it will
replace the original field.

### Regular Expression

The regular expression is used to match the whole text field of each document
with Java regex engine. Each named capture group in the expression will become
a new \`STRING\` field.

### Example 1: Create the new field

The example shows how to create new field \`host\` for each document. \`host\`
will be the host name after \`@\` in \`email\` field. Parsing a null field will
return an empty string.

PPL query:

    os> source=accounts | parse email '.+@(?<host>.+)' | fields email, host ;
    fetched rows / total rows = 4/4
    +-----------------------+------------+
    | email                 | host       |
    |-----------------------+------------|
    | amberduke@pyrami.com  | pyrami.com |
    | hattiebond@netagy.com | netagy.com |
    | null                  |            |
    | daleadams@boink.com   | boink.com  |
    +-----------------------+------------+

### Example 2: Override the existing field

The example shows how to override the existing \`address\` field with street
number removed.

PPL query:

    os> source=accounts | parse address '\\\\d+ (?<address>.+)' | fields address ;
    fetched rows / total rows = 4/4
    +------------------+
    | address          |
    |------------------|
    | Holmes Lane      |
    | Bristol Street   |
    | Madison Street   |
    | Hutchinson Court |
    +------------------+

### Example 3: Filter and sort by casted parsed field

The example shows how to sort street numbers that are higher than 500 in
\`address\` field.

PPL query:

    os> source=accounts | parse address '(?<streetNumber>d+) (?<street>.+)' | where cast(streetNumber as int) > 500 | sort num(streetNumber) | fields streetNumber, street ;
    fetched rows / total rows = 3/3
    +----------------+----------------+
    | streetNumber   | street         |
    |----------------+----------------|
    | 671            | Bristol Street |
    | 789            | Madison Street |
    | 880            | Holmes Lane    |
    +----------------+----------------+

### Limitation

There are a few limitations with parse command:

- Fields defined by parse cannot be parsed again.

  The following command will not work:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | parse street '\\\\w+ (?<road>\\\\w+)' ;

- Fields defined by parse cannot be overridden with other commands.

  \`where\` will not match any documents since \`street\` cannot be overridden:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | eval street='1' | where street='1' ;

- The text field used by parse cannot be overridden.

  \`street\` will not be successfully parsed since \`address\` is overridden:

      source=accounts | parse address '\\\\d+ (?<street>.+)' | eval address='1' ;

- Fields defined by parse cannot be filtered/sorted after using them in
\`stats\` command.

  \`where\` in the following command will not work:

      source=accounts | parse email '.+@(?<host>.+)' | stats avg(age) by host | where host=pyrami.com ;
",
                                                      },
                                                      Object {
                                                        "label": "rare",
                                                        "value": "## rare
---

### Description

Using \`rare\` command to find the least common tuple of values of all
fields in the field list.

**Note**: A maximum of 10 results is returned for each distinct tuple of
values of the group-by fields.

### Syntax

rare &lt;field-list&gt; [by-clause]

-   field-list: mandatory. comma-delimited list of field names.
-   by-clause: optional. one or more fields to group the results by.

### Example 1: Find the least common values in a field

The example finds least common gender of all the accounts.

PPL query:

    os> source=accounts | rare gender;
    fetched rows / total rows = 2/2
    +------------+
    | gender     |
    |------------|
    | F          |
    |------------|
    | M          |
    +------------+

### Example 2: Find the least common values organized by gender

The example finds least common age of all the accounts group by gender.

PPL query:

    os> source=accounts | rare age by gender;
    fetched rows / total rows = 20/20
    +----------+----------+
    | gender   | age      |
    |----------+----------|
    | F        | 29       |
    | F        | 20       |
    | F        | 23       |
    | F        | 25       |
    | F        | 37       |
    | F        | 38       |
    | F        | 40       |
    | F        | 27       |
    | F        | 36       |
    | F        | 24       |
    | M        | 27       |
    | M        | 24       |
    | M        | 34       |
    | M        | 38       |
    | M        | 28       |
    | M        | 39       |
    | M        | 21       |
    | M        | 30       |
    | M        | 25       |
    | M        | 29       |
    +----------+----------+

#### Limitation
The \`rare\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                      Object {
                                                        "label": "top",
                                                        "value": "## top
---
### Description

Using \`top\` command to find the most common tuple of values of all
fields in the field list.

### Syntax

top [N] &lt;field-list&gt; [by-clause]

-   N: number of results to return. **Default**: 10
-   field-list: mandatory. comma-delimited list of field names.
-   by-clause: optional. one or more fields to group the results by.

### Example 1: Find the most common values in a field

The example finds most common gender of all the accounts.

PPL query:

    os> source=accounts | top gender;
    fetched rows / total rows = 2/2
    +------------+
    | gender     |
    |------------|
    | M          |
    |------------|
    | F          |
    +------------+

### Example 2: Find the most common values in a field

The example finds most common gender of all the accounts.

PPL query:

    os> source=accounts | top 1 gender;
    fetched rows / total rows = 1/1
    +------------+
    | gender     |
    |------------|
    | M          |
    +------------+

### Example 3: Find the most common values organized by gender

The example finds most common age of all the accounts group by gender.

PPL query:

    os> source=accounts | top 1 age by gender;
    fetched rows / total rows = 2/2
    +----------+----------+
    | gender   | age      |
    |----------+----------|
    | F        | 39       |
    | M        | 31       |
    +----------+----------+

#### Limitation
The \`top\` command is not rewritten to OpenSearch DSL, it is only executed on the coordination node.
",
                                                      },
                                                    ],
                                                  },
                                                  Object {
                                                    "label": "Functions",
                                                    "options": Array [
                                                      Object {
                                                        "label": "Math",
                                                        "value": "## Math
---

### ABS

**Description**

Usage: abs(x) calculate the abs x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER/LONG/FLOAT/DOUBLE

Example:

    os> source=people | eval \`ABS(-1)\` = ABS(-1) | fields \`ABS(-1)\`
    fetched rows / total rows = 1/1
    +-----------+
    | ABS(-1)   |
    |-----------|
    | 1         |
    +-----------+

### ACOS

**Description**

Usage: acos(x) calculate the arc cosine of x. Returns NULL if x is not
in the range -1 to 1.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ACOS(0)\` = ACOS(0) | fields \`ACOS(0)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | ACOS(0)            |
    |--------------------|
    | 1.5707963267948966 |
    +--------------------+

### ASIN

**Description**

Usage: asin(x) calculate the arc sine of x. Returns NULL if x is not in
the range -1 to 1.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ASIN(0)\` = ASIN(0) | fields \`ASIN(0)\`
    fetched rows / total rows = 1/1
    +-----------+
    | ASIN(0)   |
    |-----------|
    | 0.0       |
    +-----------+

### ATAN

**Description**

Usage: atan(x) calculates the arc tangent of x. atan(y, x&#41; calculates
the arc tangent of y / x, except that the signs of both arguments are
used to determine the quadrant of the result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ATAN(2)\` = ATAN(2), \`ATAN(2, 3)\` = ATAN(2, 3) | fields \`ATAN(2)\`, \`ATAN(2, 3)\`
    fetched rows / total rows = 1/1
    +--------------------+--------------------+
    | ATAN(2)            | ATAN(2, 3)         |
    |--------------------+--------------------|
    | 1.1071487177940904 | 0.5880026035475675 |
    +--------------------+--------------------+

### ATAN2

**Description**

Usage: atan2(y, x&#41; calculates the arc tangent of y / x, except that the
signs of both arguments are used to determine the quadrant of the
result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`ATAN2(2, 3)\` = ATAN2(2, 3) | fields \`ATAN2(2, 3)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | ATAN2(2, 3)        |
    |--------------------|
    | 0.5880026035475675 |
    +--------------------+

### CEIL

**Description**

Usage: ceil(x) return the smallest integer value this is greater or
equal to x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`CEIL(2.75)\` = CEIL(2.75) | fields \`CEIL(2.75)\`
    fetched rows / total rows = 1/1
    +--------------+
    | CEIL(2.75)   |
    |--------------|
    | 3            |
    +--------------+

### CONV

**Description**

Usage: CONV(x, a, b) converts the number x from a base to b base.

Argument type: x: STRING, a: INTEGER, b: INTEGER

Return type: STRING

Example:

    os> source=people | eval \`CONV('12', 10, 16)\` = CONV('12', 10, 16), \`CONV('2C', 16, 10)\` = CONV('2C', 16, 10), \`CONV(12, 10, 2)\` = CONV(12, 10, 2), \`CONV(1111, 2, 10)\` = CONV(1111, 2, 10) | fields \`CONV('12', 10, 16)\`, \`CONV('2C', 16, 10)\`, \`CONV(12, 10, 2)\`, \`CONV(1111, 2, 10)\`
    fetched rows / total rows = 1/1
    +----------------------+----------------------+-------------------+---------------------+
    | CONV('12', 10, 16)   | CONV('2C', 16, 10)   | CONV(12, 10, 2)   | CONV(1111, 2, 10)   |
    |----------------------+----------------------+-------------------+---------------------|
    | c                    | 44                   | 1100              | 15                  |
    +----------------------+----------------------+-------------------+---------------------+

### COS

**Description**

Usage: cos(x) calculate the cosine of x, where x is given in radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`COS(0)\` = COS(0) | fields \`COS(0)\`
    fetched rows / total rows = 1/1
    +----------+
    | COS(0)   |
    |----------|
    | 1.0      |
    +----------+

### COT

**Description**

Usage: cot(x) calculate the cotangent of x. Returns out-of-range error
if x equals to 0.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`COT(1)\` = COT(1) | fields \`COT(1)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | COT(1)             |
    |--------------------|
    | 0.6420926159343306 |
    +--------------------+

### CRC32

**Description**

Usage: Calculates a cyclic redundancy check value and returns a 32-bit
unsigned value.

Argument type: STRING

Return type: LONG

Example:

    os> source=people | eval \`CRC32('MySQL')\` = CRC32('MySQL') | fields \`CRC32('MySQL')\`
    fetched rows / total rows = 1/1
    +------------------+
    | CRC32('MySQL')   |
    |------------------|
    | 3259397556       |
    +------------------+

### DEGREES

**Description**

Usage: degrees(x) converts x from radians to degrees.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`DEGREES(1.57)\` = DEGREES(1.57) | fields \`DEGREES(1.57)\`
    fetched rows / total rows  = 1/1
    +-------------------+
    | DEGREES(1.57)     |
    |-------------------|
    | 89.95437383553924 |
    +-------------------+

### E

**Description**

Usage: E() returns the Euler's number

Return type: DOUBLE

Example:

    os> source=people | eval \`E()\` = E() | fields \`E()\`
    fetched rows / total rows = 1/1
    +-------------------+
    | E()               |
    |-------------------|
    | 2.718281828459045 |
    +-------------------+

### EXP

**Description**

Usage: exp(x) return e raised to the power of x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`EXP(2)\` = EXP(2) | fields \`EXP(2)\`
    fetched rows / total rows = 1/1
    +------------------+
    | EXP(2)           |
    |------------------|
    | 7.38905609893065 |
    +------------------+

### FLOOR

**Description**

Usage: floor(x) return the largest integer value this is smaller or
equal to x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`FLOOR(2.75)\` = FLOOR(2.75) | fields \`FLOOR(2.75)\`
    fetched rows / total rows = 1/1
    +---------------+
    | FLOOR(2.75)   |
    |---------------|
    | 2             |
    +---------------+

### LN

**Description**

Usage: ln(x) return the the natural logarithm of x.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LN(2)\` = LN(2) | fields \`LN(2)\`
    fetched rows / total rows = 1/1
    +--------------------+
    | LN(2)              |
    |--------------------|
    | 0.6931471805599453 |
    +--------------------+

### LOG

**Description**

Specifications:

Usage: log(x) returns the natural logarithm of x that is the base e
logarithm of the x. log(B, x&#41; is equivalent to log(x)/log(B).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG(2)\` = LOG(2), \`LOG(2, 8)\` = LOG(2, 8) | fields \`LOG(2)\`, \`LOG(2, 8)\`
    fetched rows / total rows = 1/1
    +--------------------+-------------+
    | LOG(2)             | LOG(2, 8)   |
    |--------------------+-------------|
    | 0.6931471805599453 | 3.0         |
    +--------------------+-------------+

### LOG2

**Description**

Specifications:

Usage: log2(x) is equivalent to log(x)/log(2).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG2(8)\` = LOG2(8) | fields \`LOG2(8)\`
    fetched rows / total rows = 1/1
    +-----------+
    | LOG2(8)   |
    |-----------|
    | 3.0       |
    +-----------+

### LOG10

**Description**

Specifications:

Usage: log10(x) is equivalent to log(x)/log(10).

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`LOG10(100)\` = LOG10(100) | fields \`LOG10(100)\`
    fetched rows / total rows = 1/1
    +--------------+
    | LOG10(100)   |
    |--------------|
    | 2.0          |
    +--------------+

### MOD

**Description**

Usage: MOD(n, m) calculates the remainder of the number n divided by m.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: Wider type between types of n and m if m is nonzero value.
If m equals to 0, then returns NULL.

Example:

    os> source=people | eval \`MOD(3, 2)\` = MOD(3, 2), \`MOD(3.1, 2)\` = MOD(3.1, 2) | fields \`MOD(3, 2)\`, \`MOD(3.1, 2)\`
    fetched rows / total rows = 1/1
    +-------------+---------------+
    | MOD(3, 2)   | MOD(3.1, 2)   |
    |-------------+---------------|
    | 1           | 1.1           |
    +-------------+---------------+

### PI

**Description**

Usage: PI() returns the constant pi

Return type: DOUBLE

Example:

    os> source=people | eval \`PI()\` = PI() | fields \`PI()\`
    fetched rows / total rows = 1/1
    +-------------------+
    | PI()              |
    |-------------------|
    | 3.141592653589793 |
    +-------------------+

### POW

**Description**

Usage: POW(x, y) calculates the value of x raised to the power of y. Bad
inputs return NULL result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Synonyms: [POWER](#power)

Example:

    os> source=people | eval \`POW(3, 2)\` = POW(3, 2), \`POW(-3, 2)\` = POW(-3, 2), \`POW(3, -2)\` = POW(3, -2) | fields \`POW(3, 2)\`, \`POW(-3, 2)\`, \`POW(3, -2)\`
    fetched rows / total rows = 1/1
    +-------------+--------------+--------------------+
    | POW(3, 2)   | POW(-3, 2)   | POW(3, -2)         |
    |-------------+--------------+--------------------|
    | 9.0         | 9.0          | 0.1111111111111111 |
    +-------------+--------------+--------------------+

### POWER

**Description**

Usage: POWER(x, y) calculates the value of x raised to the power of y.
Bad inputs return NULL result.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Synonyms: [POW](#pow)

Example:

    os> source=people | eval \`POWER(3, 2)\` = POWER(3, 2), \`POWER(-3, 2)\` = POWER(-3, 2), \`POWER(3, -2)\` = POWER(3, -2) | fields \`POWER(3, 2)\`, \`POWER(-3, 2)\`, \`POWER(3, -2)\`
    fetched rows / total rows = 1/1
    +---------------+----------------+--------------------+
    | POWER(3, 2)   | POWER(-3, 2)   | POWER(3, -2)       |
    |---------------+----------------+--------------------|
    | 9.0           | 9.0            | 0.1111111111111111 |
    +---------------+----------------+--------------------+

### RADIANS

**Description**

Usage: radians(x) converts x from degrees to radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`RADIANS(90)\` = RADIANS(90) | fields \`RADIANS(90)\`
    fetched rows / total rows  = 1/1
    +--------------------+
    | RADIANS(90)        |
    |--------------------|
    | 1.5707963267948966 |
    +--------------------+

### RAND

**Description**

Usage: RAND()/RAND(N) returns a random floating-point value in the range
0 &lt;= value &lt; 1.0. If integer N is specified, the seed is
initialized prior to execution. One implication of this behavior is with
identical argument N, rand(N) returns the same value each time, and thus
produces a repeatable sequence of column values.

Argument type: INTEGER

Return type: FLOAT

Example:

    os> source=people | eval \`RAND(3)\` = RAND(3) | fields \`RAND(3)\`
    fetched rows / total rows = 1/1
    +------------+
    | RAND(3)    |
    |------------|
    | 0.73105735 |
    +------------+

### ROUND

**Description**

Usage: ROUND(x, d) rounds the argument x to d decimal places, d defaults
to 0 if not specified

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type map:

(INTEGER/LONG [,INTEGER]) -&gt; LONG (FLOAT/DOUBLE [,INTEGER]) -&gt;
LONG

Example:

    os> source=people | eval \`ROUND(12.34)\` = ROUND(12.34), \`ROUND(12.34, 1)\` = ROUND(12.34, 1), \`ROUND(12.34, -1)\` = ROUND(12.34, -1), \`ROUND(12, 1)\` = ROUND(12, 1) | fields \`ROUND(12.34)\`, \`ROUND(12.34, 1)\`, \`ROUND(12.34, -1)\`, \`ROUND(12, 1)\`
    fetched rows / total rows = 1/1
    +----------------+-------------------+--------------------+----------------+
    | ROUND(12.34)   | ROUND(12.34, 1)   | ROUND(12.34, -1)   | ROUND(12, 1)   |
    |----------------+-------------------+--------------------+----------------|
    | 12.0           | 12.3              | 10.0               | 12             |
    +----------------+-------------------+--------------------+----------------+

### SIGN

**Description**

Usage: Returns the sign of the argument as -1, 0, or 1, depending on
whether the number is negative, zero, or positive

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: INTEGER

Example:

    os> source=people | eval \`SIGN(1)\` = SIGN(1), \`SIGN(0)\` = SIGN(0), \`SIGN(-1.1)\` = SIGN(-1.1) | fields \`SIGN(1)\`, \`SIGN(0)\`, \`SIGN(-1.1)\`
    fetched rows / total rows = 1/1
    +-----------+-----------+--------------+
    | SIGN(1)   | SIGN(0)   | SIGN(-1.1)   |
    |-----------+-----------+--------------|
    | 1         | 0         | -1           |
    +-----------+-----------+--------------+

### SIN

**Description**

Usage: sin(x) calculate the sine of x, where x is given in radians.

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type: DOUBLE

Example:

    os> source=people | eval \`SIN(0)\` = SIN(0) | fields \`SIN(0)\`
    fetched rows / total rows = 1/1
    +----------+
    | SIN(0)   |
    |----------|
    | 0.0      |
    +----------+

### SQRT

**Description**

Usage: Calculates the square root of a non-negative number

Argument type: INTEGER/LONG/FLOAT/DOUBLE

Return type map:

(Non-negative) INTEGER/LONG/FLOAT/DOUBLE -&gt; DOUBLE (Negative)
INTEGER/LONG/FLOAT/DOUBLE -&gt; NULL

Example:

    os> source=people | eval \`SQRT(4)\` = SQRT(4), \`SQRT(4.41)\` = SQRT(4.41) | fields \`SQRT(4)\`, \`SQRT(4.41)\`
    fetched rows / total rows = 1/1
    +-----------+--------------+
    | SQRT(4)   | SQRT(4.41)   |
    |-----------+--------------|
    | 2.0       | 2.1          |
    +-----------+--------------+
",
                                                      },
                                                      Object {
                                                        "label": "Date and Time",
                                                        "value": "## Datetime
---

### **ADDDATE**

Description

Usage: adddate(date, INTERVAL expr unit)/ adddate(date, expr) adds the
time interval of second argument to date; adddate(date, days) adds the
second argument as integer number of days to date.

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

(DATE/DATETIME/TIMESTAMP/STRING, INTERVAL) -&gt; DATETIME

(DATE, LONG) -&gt; DATE

(DATETIME/TIMESTAMP/STRING, LONG) -&gt; DATETIME

Synonyms: [DATE_ADD](#date_add)

Example:

    os> source=people | eval \`ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)\` = ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR), \`ADDDATE(DATE('2020-08-26'), 1)\` = ADDDATE(DATE('2020-08-26'), 1), \`ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)\`, \`ADDDATE(DATE('2020-08-26'), 1)\`, \`ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +------------------------------------------------+----------------------------------+------------------------------------------------+
    | ADDDATE(DATE('2020-08-26'), INTERVAL 1 HOUR)   | ADDDATE(DATE('2020-08-26'), 1)   | ADDDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |------------------------------------------------+----------------------------------+------------------------------------------------|
    | 2020-08-26 01:00:00                            | 2020-08-27                       | 2020-08-27 01:01:01                            |
    +------------------------------------------------+----------------------------------+------------------------------------------------+

### **DATE**

**Description**

Usage: date(expr) constructs a date type with the input string expr as a
date. If the argument is of date/datetime/timestamp, it extracts the
date value part from the expression.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: DATE

Example:

    >od source=people | eval \`DATE('2020-08-26')\` = DATE('2020-08-26'), \`DATE(TIMESTAMP('2020-08-26 13:49:00'))\` = DATE(TIMESTAMP('2020-08-26 13:49:00')) | fields \`DATE('2020-08-26')\`, \`DATE(TIMESTAMP('2020-08-26 13:49:00'))\`
    fetched rows / total rows = 1/1
    +----------------------+------------------------------------------+
    | DATE('2020-08-26')   | DATE(TIMESTAMP('2020-08-26 13:49:00'))   |
    |----------------------+------------------------------------------|
    | DATE '2020-08-26'    | DATE '2020-08-26'                        |
    +----------------------+------------------------------------------+

### **DATE_ADD**

**Description**

Usage: date_add(date, INTERVAL expr unit)/ date_add(date, expr) adds
the time interval expr to date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [ADDDATE](#adddate)

Example:

    os> source=people | eval \`DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)\` = DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR), \`DATE_ADD(DATE('2020-08-26'), 1)\` = DATE_ADD(DATE('2020-08-26'), 1), \`DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)\`, \`DATE_ADD(DATE('2020-08-26'), 1)\`, \`DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+
    | DATE_ADD(DATE('2020-08-26'), INTERVAL 1 HOUR)   | DATE_ADD(DATE('2020-08-26'), 1)   | DATE_ADD(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |-------------------------------------------------+-----------------------------------+-------------------------------------------------|
    | 2020-08-26 01:00:00                             | 2020-08-27                        | 2020-08-27 01:01:01                             |
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+

### **DATE_FORMAT**

**Description**

Usage: date_format(date, format) formats the date argument using the
specifiers in the format argument.

| Specifier | Description                                                                                      |
|-----------|--------------------------------------------------------------------------------------------------|
| %a        | Abbreviated weekday name (Sun..Sat)                                                              |
| %b        | Abbreviated month name (Jan..Dec)                                                                |
| %c        | Month, numeric (0..12)                                                                           |
| %D        | Day of the month with English suffix (0th, 1st, 2nd, 3rd, …)                                     |
| %d        | Day of the month, numeric (00..31)                                                               |
| %e        | Day of the month, numeric (0..31)                                                                |
| %f        | Microseconds (000000..999999)                                                                    |
| %H        | Hour (00..23)                                                                                    |
| %h        | Hour (01..12)                                                                                    |
| %I        | Hour (01..12)                                                                                    |
| %i        | Minutes, numeric (00..59)                                                                        |
| %j        | Day of year (001..366)                                                                           |
| %k        | Hour (0..23)                                                                                     |
| %l        | Hour (1..12)                                                                                     |
| %M        | Month name (January..December)                                                                   |
| %m        | Month, numeric (00..12)                                                                          |
| %p        | AM or PM                                                                                         |
| %r        | Time, 12-hour (hh:mm&#58;ss followed by AM or PM)                                                    |
| %S        | Seconds (00..59)                                                                                 |
| %s        | Seconds (00..59)                                                                                 |
| %T        | Time, 24-hour (hh:mm:ss)                                                                         |
| %U        | Week (00..53), where Sunday is the first day of the week; WEEK() mode 0                          |
| %u        | Week (00..53), where Monday is the first day of the week; WEEK() mode 1                          |
| %V        | Week (01..53), where Sunday is the first day of the week; WEEK() mode 2; used with %X            |
| %v        | Week (01..53), where Monday is the first day of the week; WEEK() mode 3; used with %x            |
| %W        | Weekday name (Sunday..Saturday)                                                                  |
| %w        | Day of the week (0=Sunday..6&#61;Saturday)                                                           |
| %X        | Year for the week where Sunday is the first day of the week, numeric, four digits; used with %V  |
| %x        | Year for the week, where Monday is the first day of the week, numeric, four digits; used with %v |
| %Y        | Year, numeric, four digits                                                                       |
| %y        | Year, numeric (two digits)                                                                       |
| %%        | A literal % character                                                                            |
| %x        | x, for any “x” not listed above                                                                  |

The following table describes the available specifier arguments.

Argument type: STRING/DATE/DATETIME/TIMESTAMP, STRING

Return type: STRING

Example:

    >od source=people | eval \`DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f')\` = DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f'), \`DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')\` = DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r') | fields \`DATE_FORMAT('1998-01-31 13:14:15.012345', '%T.%f')\`, \`DATE_FORMAT(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')\`
    fetched rows / total rows = 1/1
    +-----------------------------------------------+----------------------------------------------------------------+
    | DATE('1998-01-31 13:14:15.012345', '%T.%f')   | DATE(TIMESTAMP('1998-01-31 13:14:15.012345'), '%Y-%b-%D %r')   |
    |-----------------------------------------------+----------------------------------------------------------------|
    | '13:14:15.012345'                             | '1998-Jan-31st 01:14:15 PM'                                    |
    +-----------------------------------------------+----------------------------------------------------------------+

### **DATE_SUB**

**Description**

Usage: date_sub(date, INTERVAL expr unit)/ date_sub(date, expr)
subtracts the time interval expr from date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [SUBDATE](#subdate)

Example:

    os> source=people | eval \`DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)\` = DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY), \`DATE_SUB(DATE('2020-08-26'), 1)\` = DATE_SUB(DATE('2020-08-26'), 1), \`DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)\`, \`DATE_SUB(DATE('2020-08-26'), 1)\`, \`DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+
    | DATE_SUB(DATE('2008-01-02'), INTERVAL 31 DAY)   | DATE_SUB(DATE('2020-08-26'), 1)   | DATE_SUB(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |-------------------------------------------------+-----------------------------------+-------------------------------------------------|
    | 2007-12-02                                      | 2020-08-25                        | 2020-08-25 01:01:01                             |
    +-------------------------------------------------+-----------------------------------+-------------------------------------------------+

### **DAY**

**Description**

Usage: day(date) extracts the day of the month for date, in the range 1
to 31. The dates with value 0 such as '0000-00-00' or '2008-00-00' are
invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Synonyms: DAYOFMONTH

Example:

    os> source=people | eval \`DAY(DATE('2020-08-26'))\` = DAY(DATE('2020-08-26')) | fields \`DAY(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------+
    | DAY(DATE('2020-08-26'))   |
    |---------------------------|
    | 26                        |
    +---------------------------+

### **DAYNAME**

**Description**

Usage: dayname(date) returns the name of the weekday for date, including
Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: STRING

Example:

    os> source=people | eval \`DAYNAME(DATE('2020-08-26'))\` = DAYNAME(DATE('2020-08-26')) | fields \`DAYNAME(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | DAYNAME(DATE('2020-08-26'))   |
    |-------------------------------|
    | Wednesday                     |
    +-------------------------------+

### **DAYOFMONTH**

**Description**

Usage: dayofmonth(date) extracts the day of the month for date, in the
range 1 to 31. The dates with value 0 such as '0000-00-00' or
'2008-00-00' are invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Synonyms: DAY

Example:

    os> source=people | eval \`DAYOFMONTH(DATE('2020-08-26'))\` = DAYOFMONTH(DATE('2020-08-26')) | fields \`DAYOFMONTH(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +----------------------------------+
    | DAYOFMONTH(DATE('2020-08-26'))   |
    |----------------------------------|
    | 26                               |
    +----------------------------------+

### **DAYOFWEEK**

**Description**

Usage: dayofweek(date) returns the weekday index for date (1 = Sunday, 2
= Monday, …, 7 = Saturday).

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`DAYOFWEEK(DATE('2020-08-26'))\` = DAYOFWEEK(DATE('2020-08-26')) | fields \`DAYOFWEEK(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | DAYOFWEEK(DATE('2020-08-26'))   |
    |---------------------------------|
    | 4                               |
    +---------------------------------+

### **DAYOFYEAR**

**Description**

Usage: dayofyear(date) returns the day of the year for date, in the
range 1 to 366.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`DAYOFYEAR(DATE('2020-08-26'))\` = DAYOFYEAR(DATE('2020-08-26')) | fields \`DAYOFYEAR(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | DAYOFYEAR(DATE('2020-08-26'))   |
    |---------------------------------|
    | 239                             |
    +---------------------------------+

### **FROM_DAYS**

**Description**

Usage: from_days(N) returns the date value given the day number N.

Argument type: INTEGER/LONG

Return type: DATE

Example:

    os> source=people | eval \`FROM_DAYS(733687)\` = FROM_DAYS(733687) | fields \`FROM_DAYS(733687)\`
    fetched rows / total rows = 1/1
    +---------------------+
    | FROM_DAYS(733687)   |
    |---------------------|
    | 2008-10-07          |
    +---------------------+

### **HOUR**

**Description**

Usage: hour(time) extracts the hour value for time. Different from the
time of day value, the time value has a large range and can be greater
than 23, so the return value of hour(time) can be also greater than 23.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`HOUR(TIME('01:02:03'))\` = HOUR(TIME('01:02:03')) | fields \`HOUR(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +--------------------------+
    | HOUR(TIME('01:02:03'))   |
    |--------------------------|
    | 1                        |
    +--------------------------+

### **MAKETIME**

**Description**

Specifications:

1.  MAKETIME(INTEGER, INTEGER, INTEGER) -&gt; DATE

### **MICROSECOND**

**Description**

Usage: microsecond(expr) returns the microseconds from the time or
datetime expression expr as a number in the range from 0 to 999999.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MICROSECOND(TIME('01:02:03.123456'))\` = MICROSECOND(TIME('01:02:03.123456')) | fields \`MICROSECOND(TIME('01:02:03.123456'))\`
    fetched rows / total rows = 1/1
    +----------------------------------------+
    | MICROSECOND(TIME('01:02:03.123456'))   |
    |----------------------------------------|
    | 123456                                 |
    +----------------------------------------+

### **MINUTE**

**Description**

Usage: minute(time) returns the minute for time, in the range 0 to 59.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MINUTE(TIME('01:02:03'))\` =  MINUTE(TIME('01:02:03')) | fields \`MINUTE(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | MINUTE(TIME('01:02:03'))   |
    |----------------------------|
    | 2                          |
    +----------------------------+

### **MONTH**

**Description**

Usage: month(date) returns the month for date, in the range 1 to 12 for
January to December. The dates with value 0 such as '0000-00-00' or
'2008-00-00' are invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`MONTH(DATE('2020-08-26'))\` =  MONTH(DATE('2020-08-26')) | fields \`MONTH(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-----------------------------+
    | MONTH(DATE('2020-08-26'))   |
    |-----------------------------|
    | 8                           |
    +-----------------------------+

### **MONTHNAME**

**Description**

Usage: monthname(date) returns the full name of the month for date.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: STRING

Example:

    os> source=people | eval \`MONTHNAME(DATE('2020-08-26'))\` = MONTHNAME(DATE('2020-08-26')) | fields \`MONTHNAME(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | MONTHNAME(DATE('2020-08-26'))   |
    |---------------------------------|
    | August                          |
    +---------------------------------+

### **NOW**

**Description**

Specifications:

1.  NOW() -&gt; DATE

### **QUARTER**

**Description**

Usage: quarter(date) returns the quarter of the year for date, in the
range 1 to 4.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`QUARTER(DATE('2020-08-26'))\` = QUARTER(DATE('2020-08-26')) | fields \`QUARTER(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | QUARTER(DATE('2020-08-26'))   |
    |-------------------------------|
    | 3                             |
    +-------------------------------+

### **SECOND**

**Description**

Usage: second(time) returns the second for time, in the range 0 to 59.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`SECOND(TIME('01:02:03'))\` = SECOND(TIME('01:02:03')) | fields \`SECOND(TIME('01:02:03'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | SECOND(TIME('01:02:03'))   |
    |----------------------------|
    | 3                          |
    +----------------------------+

### **SUBDATE**

**Description**

Usage: subdate(date, INTERVAL expr unit)/ subdate(date, expr) subtracts
the time interval expr from date

Argument type: DATE/DATETIME/TIMESTAMP/STRING, INTERVAL/LONG

Return type map:

DATE/DATETIME/TIMESTAMP/STRING, INTERVAL -&gt; DATETIME

DATE, LONG -&gt; DATE

DATETIME/TIMESTAMP/STRING, LONG -&gt; DATETIME

Synonyms: [DATE_SUB](#date_sub)

Example:

    os> source=people | eval \`SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)\` = SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY), \`SUBDATE(DATE('2020-08-26'), 1)\` = SUBDATE(DATE('2020-08-26'), 1), \`SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\` = SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1) | fields \`SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)\`, \`SUBDATE(DATE('2020-08-26'), 1)\`, \`SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)\`
    fetched rows / total rows = 1/1
    +------------------------------------------------+----------------------------------+------------------------------------------------+
    | SUBDATE(DATE('2008-01-02'), INTERVAL 31 DAY)   | SUBDATE(DATE('2020-08-26'), 1)   | SUBDATE(TIMESTAMP('2020-08-26 01:01:01'), 1)   |
    |------------------------------------------------+----------------------------------+------------------------------------------------|
    | 2007-12-02                                     | 2020-08-25                       | 2020-08-25 01:01:01                            |
    +------------------------------------------------+----------------------------------+------------------------------------------------+

### **TIME**

**Description**

Usage: time(expr) constructs a time type with the input string expr as a
time. If the argument is of date/datetime/time/timestamp, it extracts
the time value part from the expression.

Argument type: STRING/DATE/DATETIME/TIME/TIMESTAMP

Return type: TIME

Example:

    >od source=people | eval \`TIME('13:49:00')\` = TIME('13:49:00'), \`TIME(TIMESTAMP('2020-08-26 13:49:00'))\` = TIME(TIMESTAMP('2020-08-26 13:49:00')) | fields \`TIME('13:49:00')\`, \`TIME(TIMESTAMP('2020-08-26 13:49:00'))\`
    fetched rows / total rows = 1/1
    +--------------------+------------------------------------------+
    | TIME('13:49:00')   | TIME(TIMESTAMP('2020-08-26 13:49:00'))   |
    |--------------------+------------------------------------------|
    | TIME '13:49:00'    | TIME '13:49:00'                          |
    +--------------------+------------------------------------------+

### **TIME_TO_SEC**

**Description**

Usage: time_to_sec(time) returns the time argument, converted to
seconds.

Argument type: STRING/TIME/DATETIME/TIMESTAMP

Return type: LONG

Example:

    os> source=people | eval \`TIME_TO_SEC(TIME('22:23:00'))\` = TIME_TO_SEC(TIME('22:23:00')) | fields \`TIME_TO_SEC(TIME('22:23:00'))\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | TIME_TO_SEC(TIME('22:23:00'))   |
    |---------------------------------|
    | 80580                           |
    +---------------------------------+

### **TIMESTAMP**

**Description**

Usage: timestamp(expr) construct a timestamp type with the input string
expr as an timestamp. If the argument is of date/datetime/timestamp
type, cast expr to timestamp type with default timezone UTC.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: TIMESTAMP

Example:

    >od source=people | eval \`TIMESTAMP('2020-08-26 13:49:00')\` = TIMESTAMP('2020-08-26 13:49:00') | fields \`TIMESTAMP('2020-08-26 13:49:00')\`
    fetched rows / total rows = 1/1
    +------------------------------------+
    | TIMESTAMP('2020-08-26 13:49:00')   |
    |------------------------------------|
    | TIMESTAMP '2020-08-26 13:49:00     |
    +------------------------------------+

### **TO_DAYS**

**Description**

Usage: to_days(date) returns the day number (the number of days since
year 0) of the given date. Returns NULL if date is invalid.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: LONG

Example:

    os> source=people | eval \`TO_DAYS(DATE('2008-10-07'))\` = TO_DAYS(DATE('2008-10-07')) | fields \`TO_DAYS(DATE('2008-10-07'))\`
    fetched rows / total rows = 1/1
    +-------------------------------+
    | TO_DAYS(DATE('2008-10-07'))   |
    |-------------------------------|
    | 733687                        |
    +-------------------------------+

### **WEEK**

**Description**

Usage: week(date[, mode]) returns the week number for date. If the
mode argument is omitted, the default mode 0 is used.

| Mode | First day of week | Range | Week 1 is the first week …    |
|------|-------------------|-------|-------------------------------|
| 0    | Sunday            | 0-53  | with a Sunday in this year    |
| 1    | Monday            | 0-53  | with 4 or more days this year |
| 2    | Sunday            | 1-53  | with a Sunday in this year    |
| 3    | Monday            | 1-53  | with 4 or more days this year |
| 4    | Sunday            | 0-53  | with 4 or more days this year |
| 5    | Monday            | 0-53  | with a Monday in this year    |
| 6    | Sunday            | 1-53  | with 4 or more days this year |
| 7    | Monday            | 1-53  | with a Monday in this year    |

The following table describes how the mode argument works.

Argument type: DATE/DATETIME/TIMESTAMP/STRING

Return type: INTEGER

Example:

    >od source=people | eval \`WEEK(DATE('2008-02-20'))\` = WEEK(DATE('2008-02-20')), \`WEEK(DATE('2008-02-20'), 1)\` = WEEK(DATE('2008-02-20'), 1) | fields \`WEEK(DATE('2008-02-20'))\`, \`WEEK(DATE('2008-02-20'), 1)\`
    fetched rows / total rows = 1/1
    +----------------------------+-------------------------------+
    | WEEK(DATE('2008-02-20'))   | WEEK(DATE('2008-02-20'), 1)   |
    |----------------------------|-------------------------------|
    | 7                          | 8                             |
    +----------------------------+-------------------------------+

### **YEAR**

**Description**

Usage: year(date) returns the year for date, in the range 1000 to 9999,
or 0 for the “zero” date.

Argument type: STRING/DATE/DATETIME/TIMESTAMP

Return type: INTEGER

Example:

    os> source=people | eval \`YEAR(DATE('2020-08-26'))\` = YEAR(DATE('2020-08-26')) | fields \`YEAR(DATE('2020-08-26'))\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | YEAR(DATE('2020-08-26'))   |
    |----------------------------|
    | 2020                       |
    +----------------------------+
",
                                                      },
                                                      Object {
                                                        "label": "String",
                                                        "value": "## String
---

### CONCAT

**Description**

Usage: CONCAT(str1, str2) returns str1 and str strings concatenated
together.

Argument type: STRING, STRING

Return type: STRING

Example:

    os> source=people | eval \`CONCAT('hello', 'world')\` = CONCAT('hello', 'world') | fields \`CONCAT('hello', 'world')\`
    fetched rows / total rows = 1/1
    +----------------------------+
    | CONCAT('hello', 'world')   |
    |----------------------------|
    | helloworld                 |
    +----------------------------+

### CONCAT_WS

**Description**

Usage: CONCAT_WS(sep, str1, str2) returns str1 concatenated with str2
using sep as a separator between them.

Argument type: STRING, STRING, STRING

Return type: STRING

Example:

    os> source=people | eval \`CONCAT_WS(',', 'hello', 'world')\` = CONCAT_WS(',', 'hello', 'world') | fields \`CONCAT_WS(',', 'hello', 'world')\`
    fetched rows / total rows = 1/1
    +------------------------------------+
    | CONCAT_WS(',', 'hello', 'world')   |
    |------------------------------------|
    | hello,world                        |
    +------------------------------------+

### LENGTH

**Description**

Specifications:

1.  LENGTH(STRING) -&gt; INTEGER

Usage: length(str) returns length of string measured in bytes.

Argument type: STRING

Return type: INTEGER

Example:

    os> source=people | eval \`LENGTH('helloworld')\` = LENGTH('helloworld') | fields \`LENGTH('helloworld')\`
    fetched rows / total rows = 1/1
    +------------------------+
    | LENGTH('helloworld')   |
    |------------------------|
    | 10                     |
    +------------------------+

### LIKE

**Description**

Usage: like(string, PATTERN) return true if the string match the
PATTERN.

There are two wildcards often used in conjunction with the LIKE
operator:

-   \`%\` - The percent sign represents zero, one, or multiple characters
-   \`_\` - The underscore represents a single character

Example:

    os> source=people | eval \`LIKE('hello world', '_ello%')\` = LIKE('hello world', '_ello%') | fields \`LIKE('hello world', '_ello%')\`
    fetched rows / total rows = 1/1
    +---------------------------------+
    | LIKE('hello world', '_ello%')   |
    |---------------------------------|
    | True                            |
    +---------------------------------+

### LOWER

**Description**

Usage: lower(string) converts the string to lowercase.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`LOWER('helloworld')\` = LOWER('helloworld'), \`LOWER('HELLOWORLD')\` = LOWER('HELLOWORLD') | fields \`LOWER('helloworld')\`, \`LOWER('HELLOWORLD')\`
    fetched rows / total rows = 1/1
    +-----------------------+-----------------------+
    | LOWER('helloworld')   | LOWER('HELLOWORLD')   |
    |-----------------------+-----------------------|
    | helloworld            | helloworld            |
    +-----------------------+-----------------------+

### LTRIM

**Description**

Usage: ltrim(str) trims leading space characters from the string.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`LTRIM('   hello')\` = LTRIM('   hello'), \`LTRIM('hello   ')\` = LTRIM('hello   ') | fields \`LTRIM('   hello')\`, \`LTRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +---------------------+---------------------+
    | LTRIM('   hello')   | LTRIM('hello   ')   |
    |---------------------+---------------------|
    | hello               | hello               |
    +---------------------+---------------------+

### RIGHT

**Description**

Usage: right(str, len) returns the rightmost len characters from the
string str, or NULL if any argument is NULL.

Argument type: STRING, INTEGER

Return type: STRING

Example:

    os> source=people | eval \`RIGHT('helloworld', 5)\` = RIGHT('helloworld', 5), \`RIGHT('HELLOWORLD', 0)\` = RIGHT('HELLOWORLD', 0) | fields \`RIGHT('helloworld', 5)\`, \`RIGHT('HELLOWORLD', 0)\`
    fetched rows / total rows = 1/1
    +--------------------------+--------------------------+
    | RIGHT('helloworld', 5)   | RIGHT('HELLOWORLD', 0)   |
    |--------------------------+--------------------------|
    | world                    |                          |
    +--------------------------+--------------------------+

### RTRIM

**Description**

Usage: rtrim(str) trims trailing space characters from the string.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`RTRIM('   hello')\` = RTRIM('   hello'), \`RTRIM('hello   ')\` = RTRIM('hello   ') | fields \`RTRIM('   hello')\`, \`RTRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +---------------------+---------------------+
    | RTRIM('   hello')   | RTRIM('hello   ')   |
    |---------------------+---------------------|
    |    hello            | hello               |
    +---------------------+---------------------+

### SUBSTRING

**Description**

Usage: substring(str, start) or substring(str, start, length) returns
substring using start and length. With no length, entire string from
start is returned.

Argument type: STRING, INTEGER, INTEGER

Return type: STRING

Synonyms: SUBSTR

Example:

    os> source=people | eval \`SUBSTRING('helloworld', 5)\` = SUBSTRING('helloworld', 5), \`SUBSTRING('helloworld', 5, 3)\` = SUBSTRING('helloworld', 5, 3) | fields \`SUBSTRING('helloworld', 5)\`, \`SUBSTRING('helloworld', 5, 3)\`
    fetched rows / total rows = 1/1
    +------------------------------+---------------------------------+
    | SUBSTRING('helloworld', 5)   | SUBSTRING('helloworld', 5, 3)   |
    |------------------------------+---------------------------------|
    | oworld                       | owo                             |
    +------------------------------+---------------------------------+

### TRIM

**Description**

Argument Type: STRING

Return type: STRING

Example:

    os> source=people | eval \`TRIM('   hello')\` = TRIM('   hello'), \`TRIM('hello   ')\` = TRIM('hello   ') | fields \`TRIM('   hello')\`, \`TRIM('hello   ')\`
    fetched rows / total rows = 1/1
    +--------------------+--------------------+
    | TRIM('   hello')   | TRIM('hello   ')   |
    |--------------------+--------------------|
    | hello              | hello              |
    +--------------------+--------------------+

### UPPER

**Description**

Usage: upper(string) converts the string to uppercase.

Argument type: STRING

Return type: STRING

Example:

    os> source=people | eval \`UPPER('helloworld')\` = UPPER('helloworld'), \`UPPER('HELLOWORLD')\` = UPPER('HELLOWORLD') | fields \`UPPER('helloworld')\`, \`UPPER('HELLOWORLD')\`
    fetched rows / total rows = 1/1
    +-----------------------+-----------------------+
    | UPPER('helloworld')   | UPPER('HELLOWORLD')   |
    |-----------------------+-----------------------|
    | HELLOWORLD            | HELLOWORLD            |
    +-----------------------+-----------------------+
",
                                                      },
                                                      Object {
                                                        "label": "Condition",
                                                        "value": "## Condition
---

### Description

Usage: isnull(field) return true if field is null.

Argument type: all the supported data type.

Return type: BOOLEAN

Example:

    os> source=accounts | eval result = isnull(employer) | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | False    | Pyrami     | Amber       |
    | False    | Netagy     | Hattie      |
    | False    | Quility    | Nanette     |
    | True     | null       | Dale        |
    +----------+------------+-------------+

### **ISNOTNULL**

**Description**

Usage: isnotnull(field) return true if field is not null.

Argument type: all the supported data type.

Return type: BOOLEAN

Example:

    os> source=accounts | where not isnotnull(employer) | fields account_number, employer
    fetched rows / total rows = 1/1
    +------------------+------------+
    | account_number   | employer   |
    |------------------+------------|
    | 18               | null       |
    +------------------+------------+

### **EXISTS**

[Because OpenSearch doesn't differentiate null and
missing](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html).
so we can't provide function like ismissing/isnotmissing to test field
exist or not. But you can still use isnull/isnotnull for such purpose.

Example, the account 13 doesn't have email field:

    os> source=accounts | where isnull(email) | fields account_number, email
    fetched rows / total rows = 1/1
    +------------------+---------+
    | account_number   | email   |
    |------------------+---------|
    | 13               | null    |
    +------------------+---------+

### **IFNULL**

**Description**

Usage: ifnull(field1, field2) return field2 if field1 is null.

Argument type: all the supported data type, (NOTE : if two parameters
has different type, you will fail semantic check.)

Return type: any

Example:

    os> source=accounts | eval result = ifnull(employer, 'default') | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | Pyrami   | Pyrami     | Amber       |
    | Netagy   | Netagy     | Hattie      |
    | Quility  | Quility    | Nanette     |
    | default  | null       | Dale        |
    +----------+------------+-------------+

### **NULLIF**

**Description**

Usage: nullif(field1, field2) return null if two parameters are same,
otherwiser return field1.

Argument type: all the supported data type, (NOTE : if two parameters
has different type, if two parameters has different type, you will fail
semantic check)

Return type: any

Example:

    os> source=accounts | eval result = nullif(employer, 'Pyrami') | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | null     | Pyrami     | Amber       |
    | Netagy   | Netagy     | Hattie      |
    | Quility  | Quility    | Nanette     |
    | null     | null       | Dale        |
    +----------+------------+-------------+

### **ISNULL**

**Description**

Usage: isnull(field1, field2) return null if two parameters are same,
otherwise return field1.

Argument type: all the supported data type

Return type: any

Example:

    os> source=accounts | eval result = isnull(employer) | fields result, employer, firstname
    fetched rows / total rows = 4/4
    +----------+------------+-------------+
    | result   | employer   | firstname   |
    |----------+------------+-------------|
    | False    | Pyrami     | Amber       |
    | False    | Netagy     | Hattie      |
    | False    | Quility    | Nanette     |
    | True     | null       | Dale        |
    +----------+------------+-------------+

### **IF**

**Description**

Usage: if(condition, expr1, expr2) return expr1 if condition is true,
otherwiser return expr2.

Argument type: all the supported data type, (NOTE : if expr1 and expr2
are different type, you will fail semantic check

Return type: any

Example:

    os> source=accounts | eval result = if(true, firstname, lastname) | fields result, firstname, lastname
    fetched rows / total rows = 4/4
    +----------+-------------+------------+
    | result   | firstname   | lastname   |
    |----------+-------------+------------|
    | Amber    | Amber       | Duke       |
    | Hattie   | Hattie      | Bond       |
    | Nanette  | Nanette     | Bates      |
    | Dale     | Dale        | Adams      |
    +----------+-------------+------------+

    os> source=accounts | eval result = if(false, firstname, lastname) | fields result, firstname, lastname
    fetched rows / total rows = 4/4
    +----------+-------------+------------+
    | result   | firstname   | lastname   |
    |----------+-------------+------------|
    | Duke     | Amber       | Duke       |
    | Bond     | Hattie      | Bond       |
    | Bates    | Nanette     | Bates      |
    | Adams    | Dale        | Adams      |
    +----------+-------------+------------+
",
                                                      },
                                                      Object {
                                                        "label": "Full Text Search",
                                                        "value": "## Full Text Search
---

The full text search based functions enable users to search the index for
documents by the full text search of the input query. The functions are built
on the top of the search queries of the OpenSearch engine, but in memory
execution within the plugin is not supported. These functions are able
to perform the global filter of a query, for example the condition
expression in a \`WHERE\` clause or in a \`HAVING\` clause. For more details
of the full text search based search, check out the design here: [Relevance
Based Search With SQL/PPL Query
Engine](https://github.com/opensearch-project/sql/issues/182)

### MATCH

**Description**

\`match(field_expression, query_expression[, option=<option_value>]*)\`

The match function maps to the match query used in search engine, to
return the documents that match a provided text, number, date or boolean
value with a given field. Available parameters include:

-   analyzer
-   auto_generate_synonyms_phrase
-   fuzziness
-   max_expansions
-   prefix_length
-   fuzzy_transpositions
-   fuzzy_rewrite
-   lenient
-   operator
-   minimum_should_match
-   zero_terms_query
-   boost

Example with only \`field\` and \`query\` expressions, and all other
parameters are set default values:

    os> source=accounts | where match(address, 'Street') | fields lastname, address;
    fetched rows / total rows = 2/2
    +------------+--------------------+
    | lastname   | address            |
    |------------+--------------------|
    | Bond       | 671 Bristol Street |
    | Bates      | 789 Madison Street |
    +------------+--------------------+

Another example to show how to set custom values for the optional
parameters:

    os> source=accounts | where match(firstname, 'Hattie', operator='AND', boost=2.0) | fields lastname;
    fetched rows / total rows = 1/1
    +------------+
    | lastname   |
    |------------|
    | Bond       |
    +------------+

### Limitations

The full text search functions are available to execute only in OpenSearch DSL
but not in memory as of now, so the full text search might fail for
queries that are too complex to translate into DSL if the full text search
function is following after a complex PPL query. To make your queries
always work-able, it is recommended to place the full text search commands as
close to the search command as possible, to ensure the full text search
functions are eligible to push down. For example, a complex query like
\`search source = people | rename firstname as name | dedup account_number | fields name, account_number, balance, employer | where match(employer, 'Open Search') | stats count() by city\`
could fail because it is difficult to translate to DSL, but it would be
better if we rewrite it to an equivalent query as
\`search source = people | where match(employer, 'Open Search') | rename firstname as name | dedup account_number | fields name, account_number, balance, employer | stats count() by city\`
by moving the where command with full text search function to the second
command right after the search command, and the full text search would be
optimized and executed smoothly in OpenSearch DSL. See [Optimization](https://github.com/opensearch-project/sql/blob/22924b13d9cb46759c8d213a7ce903effe06ab47/docs/user/optimization/optimization.rst)
to get more details about the query engine optimization.
",
                                                      },
                                                    ],
                                                  },
                                                  Object {
                                                    "label": "Language Structure",
                                                    "options": Array [
                                                      Object {
                                                        "label": "Identifiers",
                                                        "value": "## Indentifiers
---

### **Introduction**

Identifiers are used for naming your database objects, such as index
name, field name, customLabel etc. Basically there are two types of
identifiers: regular identifiers and delimited identifiers.

### **Regular Identifiers**

**Description**

A regular identifier is a string of characters that must start with
ASCII letter (lower or upper case). The subsequent character can be a
combination of letter, digit, underscore (\`_\`). It cannot be a reversed
key word. And whitespace and other special characters are not allowed.

For OpenSearch, the following identifiers are supported extensionally:

1.  Identifiers prefixed by dot \`.\`: this is called hidden index in
    OpenSearch, for example \`.opensearch_dashboards\`.
2.  Identifiers prefixed by at sign \`@\`: this is common for meta fields
    generated in Logstash ingestion.
3.  Identifiers with \`-\` in the middle: this is mostly the case for
    index name with date information.
4.  Identifiers with star \`*\` present: this is mostly an index pattern
    for wildcard match.

Index name with date suffix separated by dash or dots, such as
\`cwl-2020.01.11\` or \`logs-7.0-2020.01.11\`, is common for those created
by Logstash or FileBeat ingestion. So, this kind of identifier used as
index name is also supported without the need of being quoted for user
convenience. In this case, wildcard within date pattern is also allowed
to search for data across indices of different date range. For example,
you can use \`logs-2020.1*\` to search in indices for October, November
and December 2020.

#### **Examples**

Here are examples for using index pattern directly without quotes:

    os> source=accounts | fields account_number, firstname, lastname;
    fetched rows / total rows = 4/4
    +------------------+-------------+------------+
    | account_number   | firstname   | lastname   |
    |------------------+-------------+------------|
    | 1                | Amber       | Duke       |
    | 6                | Hattie      | Bond       |
    | 13               | Nanette     | Bates      |
    | 18               | Dale        | Adams      |
    +------------------+-------------+------------+

### **Delimited Identifiers**

**Description**

A delimited identifier is an identifier enclosed in back ticks \`\`. In
this case, the identifier enclosed is not necessarily a regular
identifier. In other words, it can contain any special character not
allowed by regular identifier.

#### **Use Cases**

Here are typical examples of the use of delimited identifiers:

1.  Identifiers of reserved key word name
2.  Identifiers with dot \`.\` present: similarly as \`-\` in index name to
    include date information, it is required to be quoted so parser can
    differentiate it from identifier with qualifiers.
3.  Identifiers with other special character: OpenSearch has its own
    rule which allows more special character, for example Unicode
    character is supported in index name.

#### **Examples**

Here are examples for quoting an index name by back ticks:

    os> source=\`accounts\` | fields \`account_number\`;
    fetched rows / total rows = 4/4
    +------------------+
    | account_number   |
    |------------------|
    | 1                |
    | 6                |
    | 13               |
    | 18               |
    +------------------+

### **Case Sensitivity**

**Description**

Identifiers are treated in case sensitive manner. So it must be exactly
same as what is stored in OpenSearch.

### **Examples**

For example, if you run \`source=Accounts\`, it will end up with an index
not found exception from our plugin because the actual index name is
under lower case.
",
                                                      },
                                                      Object {
                                                        "label": "Data Types",
                                                        "value": "## Data Types
---
### **Overview**

### PPL Data Types

The PPL support the following data types.

| PPL Data Type |
|---------------|
| boolean       |
| byte          |
| short         |
| integer       |
| long          |
| float         |
| double        |
| string        |
| text          |
| timestamp     |
| datetime      |
| date          |
| time          |
| interval      |
| ip            |
| geo_point    |
| binary        |
| struct        |
| array         |

### Data Types Mapping

The table below list the mapping between OpenSearch Data Type, PPL Data
Type and SQL Type.

| OpenSearch Type | PPL Type  | SQL Type  |
|-----------------|-----------|-----------|
| boolean         | boolean   | BOOLEAN   |
| byte            | byte      | TINYINT   |
| short           | byte      | SMALLINT  |
| integer         | integer   | INTEGER   |
| long            | long      | BIGINT    |
| float           | float     | REAL      |
| half_float     | float     | FLOAT     |
| scaled_float   | float     | DOUBLE    |
| double          | double    | DOUBLE    |
| keyword         | string    | VARCHAR   |
| text            | text      | VARCHAR   |
| date            | timestamp | TIMESTAMP |
| ip              | ip        | VARCHAR   |
| date            | timestamp | TIMESTAMP |
| binary          | binary    | VARBINARY |
| object          | struct    | STRUCT    |
| nested          | array     | STRUCT    |

Notes: Not all the PPL Type has correspond OpenSearch Type. e.g. data
and time. To use function which required such data type, user should
explict convert the data type.

### **Numeric Data Types**

Numeric values ranged from -2147483648 to +2147483647 are recognized as
integer with type name \`INTEGER\`. For others outside the range, \`LONG\`
integer will be the data type after parsed.

### **Date and Time Data Types**

The date and time data types are the types that represent temporal
values and PPL plugin supports types including DATE, TIME, DATETIME,
TIMESTAMP and INTERVAL. By default, the OpenSearch DSL uses date type as
the only date and time related type, which has contained all information
about an absolute time point. To integrate with PPL language, each of
the types other than timestamp is holding part of temporal or timezone
information, and the usage to explicitly clarify the date and time types
is reflected in the datetime functions (see [Functions](functions.rst)
for details), where some functions might have restrictions in the input
argument type.

#### **Date**

Date represents the calendar date regardless of the time zone. A given
date value represents a 24-hour period, or say a day, but this period
varies in different timezones and might have flexible hours during
Daylight Savings Time programs. Besides, the date type does not contain
time information as well. The supported range is '1000-01-01' to
'9999-12-31'.

| Type | Syntax       | Range                        |
|------|--------------|------------------------------|
| Date | 'yyyy-MM-dd' | '0001-01-01' to '9999-12-31' |

#### **Time**

Time represents the time on the clock or watch with no regard for which
timezone it might be related with. Time type data does not have date
information.

| Type | Syntax                  | Range                                  |
|------|-------------------------|----------------------------------------|
| Time | 'hh:mm&#58;ss[.fraction]' | '00:00:00.000000' to '23:59:59.999999' |

#### **Datetime**

Datetime type is the combination of date and time. The conversion rule
of date or time to datetime is described in [Conversion between date and
time types](#conversion-between-date-and-time-types). Datetime type does
not contain timezone information. For an absolute time point that
contains both date time and timezone information, see
[Timestamp](#timestamp).

| Type     | Syntax                             | Range                                                        |
|----------|------------------------------------|--------------------------------------------------------------|
| Datetime | 'yyyy-MM-dd hh:mm&#58;ss[.fraction]' | '0001-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999' |

#### **Timestamp**

A timestamp instance is an absolute instant independent of timezone or
convention. For example, for a given point of time, if we set the
timestamp of this time point into another timezone, the value should
also be different accordingly. Besides, the storage of timestamp type is
also different from the other types. The timestamp is converted from the
current timezone to UTC for storage, and is converted back to the set
timezone from UTC when retrieving.

| Type      | Syntax                             | Range                                                            |
|-----------|------------------------------------|------------------------------------------------------------------|
| Timestamp | 'yyyy-MM-dd hh:mm&#58;ss[.fraction]' | '0001-01-01 00:00&#58;01.000000' UTC to '9999-12-31 23:59:59.999999' |

####  **Interval**

Interval data type represents a temporal duration or a period. The
syntax is as follows:

| Type     | Syntax             |
|----------|--------------------|
| Interval | INTERVAL expr unit |

The expr is any expression that can be iterated to a quantity value
eventually, see [Expressions](expressions.rst) for details. The unit
represents the unit for interpreting the quantity, including
MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER and
YEAR.The INTERVAL keyword and the unit specifier are not case sensitive.
Note that there are two classes of intervals. Year-week intervals can
store years, quarters, months and weeks. Day-time intervals can store
days, hours, minutes, seconds and microseconds. Year-week intervals are
comparable only with another year-week intervals. These two types of
intervals can only comparable with the same type of themselves.

### **Conversion between date and time types**

Basically the date and time types except interval can be converted to
each other, but might suffer some alteration of the value or some
information loss, for example extracting the time value from a datetime
value, or convert a date value to a datetime value and so forth. Here
lists the summary of the conversion rules that PPL plugin supports for
each of the types:

#### **Conversion from DATE**

-   Since the date value does not have any time information, conversion
    to [Time](#time) type is not useful, and will always return a zero
    time value '00:00:00'.
-   Conversion from date to datetime has a data fill-up due to the lack
    of time information, and it attaches the time '00:00:00' to the
    original date by default and forms a datetime instance. For example,
    the result to covert date '2020-08-17' to datetime type is datetime
    '2020-08-17 00:00:00'.
-   Conversion to timestamp is to alternate both the time value and the
    timezone information, and it attaches the zero time value '00:00:00'
    and the session timezone (UTC by default) to the date. For example,
    the result to covert date '2020-08-17' to datetime type with session
    timezone UTC is datetime '2020-08-17 00:00:00' UTC.

#### **Conversion from TIME**

-   Time value cannot be converted to any other date and time types
    since it does not contain any date information, so it is not
    meaningful to give no date info to a date/datetime/timestamp
    instance.

#### **Conversion from DATETIME**

-   Conversion from datetime to date is to extract the date part from
    the datetime value. For example, the result to convert datetime
    '2020-08-17 14&#58;09&#58;00' to date is date '2020-08-08'.
-   Conversion to time is to extract the time part from the datetime
    value. For example, the result to convert datetime '2020-08-17
    14&#58;09&#58;00' to time is time '14&#58;09&#58;00'.
-   Since the datetime type does not contain timezone information, the
    conversion to timestamp needs to fill up the timezone part with the
    session timezone. For example, the result to convert datetime
    '2020-08-17 14&#58;09&#58;00' with system timezone of UTC, to timestamp is
    timestamp '2020-08-17 14&#58;09&#58;00' UTC.

#### **Conversion from TIMESTAMP**

-   Conversion from timestamp is much more straightforward. To convert
    it to date is to extract the date value, and conversion to time is
    to extract the time value. Conversion to datetime, it will extracts
    the datetime value and leave the timezone information over. For
    example, the result to convert datetime '2020-08-17 14&#58;09&#58;00' UTC to
    date is date '2020-08-17', to time is '14&#58;09&#58;00' and to datetime is
    datetime '2020-08-17 14&#58;09&#58;00'.

### **String Data Types**

A string is a sequence of characters enclosed in either single or double
quotes. For example, both 'text' and \\"text\\" will be treated as string
literal.

### **Query Struct Data Types**

In PPL, the Struct Data Types corresponding to the [Object field type in
OpenSearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html).
The \\".\\" is used as the path selector when access the inner attribute of
the struct data.

#### **Example: People**

There are three fields in test index \`people\`: 1) deep nested object
field \`city\`; 2) object field of array value \`account\`; 3) nested field
\`projects\`:

    {
      \\"mappings\\": {
        \\"properties\\": {
          \\"city\\": {
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"keyword\\"
              },
              \\"location\\": {
                \\"properties\\": {
                  \\"latitude\\": {
                    \\"type\\": \\"double\\"
                  }
                }
              }
            }
          },
          \\"account\\": {
            \\"properties\\": {
              \\"id\\": {
                \\"type\\": \\"keyword\\"
              }
            }
          },
          \\"projects\\": {
            \\"type\\": \\"nested\\",
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"keyword\\"
              }
            }
          }
        }
      }
    }

#### **Example: Employees**

Here is the mapping for test index \`employees_nested\`. Note that field
\`projects\` is a nested field:

    {
      \\"mappings\\": {
        \\"properties\\": {
          \\"id\\": {
            \\"type\\": \\"long\\"
          },
          \\"name\\": {
            \\"type\\": \\"text\\",
            \\"fields\\": {
              \\"keyword\\": {
                \\"type\\": \\"keyword\\",
                \\"ignore_above\\": 256
              }
            }
          },
          \\"projects\\": {
            \\"type\\": \\"nested\\",
            \\"properties\\": {
              \\"name\\": {
                \\"type\\": \\"text\\",
                \\"fields\\": {
                  \\"keyword\\": {
                    \\"type\\": \\"keyword\\"
                  }
                },
                \\"fielddata\\": true
              },
              \\"started_year\\": {
                \\"type\\": \\"long\\"
              }
            }
          },
          \\"title\\": {
            \\"type\\": \\"text\\",
            \\"fields\\": {
              \\"keyword\\": {
                \\"type\\": \\"keyword\\",
                \\"ignore_above\\": 256
              }
            }
          }
        }
      }
    }

Result set:

    {
      \\"employees_nested\\" : [
        {
          \\"id\\" : 3,
          \\"name\\" : \\"Bob Smith\\",
          \\"title\\" : null,
          \\"projects\\" : [
            {
              \\"name\\" : \\"AWS Redshift Spectrum querying\\",
              \\"started_year\\" : 1990
            },
            {
              \\"name\\" : \\"AWS Redshift security\\",
              \\"started_year\\" : 1999
            },
            {
              \\"name\\" : \\"AWS Aurora security\\",
              \\"started_year\\" : 2015
            }
          ]
        },
        {
          \\"id\\" : 4,
          \\"name\\" : \\"Susan Smith\\",
          \\"title\\" : \\"Dev Mgr\\",
          \\"projects\\" : [ ]
        },
        {
          \\"id\\" : 6,
          \\"name\\" : \\"Jane Smith\\",
          \\"title\\" : \\"Software Eng 2\\",
          \\"projects\\" : [
            {
              \\"name\\" : \\"AWS Redshift security\\",
              \\"started_year\\" : 1998
            },
            {
              \\"name\\" : \\"AWS Hello security\\",
              \\"started_year\\" : 2015,
              \\"address\\" : [
                {
                  \\"city\\" : \\"Dallas\\",
                  \\"state\\" : \\"TX\\"
                }
              ]
            }
          ]
        }
      ]
    }

#### **Example 1: Select struct inner attribute**

The example show fetch city (top level), city.name (second level),
city.location.latitude (deeper level) struct type data from people
results.

PPL query:

    os> source=people | fields city, city.name, city.location.latitude;
    fetched rows / total rows = 1/1
    +-----------------------------------------------------+-------------+--------------------------+
    | city                                                | city.name   | city.location.latitude   |
    |-----------------------------------------------------+-------------+--------------------------|
    | {'name': 'Seattle', 'location': {'latitude': 10.5}} | Seattle     | 10.5                     |
    +-----------------------------------------------------+-------------+--------------------------+

#### **Example 2: Group by struct inner attribute**

The example show group by object field inner attribute.

PPL query:

    os> source=people | stats count() by city.name;
    fetched rows / total rows = 1/1
    +-----------+-------------+
    | count()   | city.name   |
    |-----------+-------------|
    | 1         | Seattle     |
    +-----------+-------------+

#### **Example 3: Selecting Field of Array Value**

Select deeper level for object fields of array value which returns the
first element in the array. For example, because inner field
\`accounts.id\` has three values instead of a tuple in this document, the
first entry is returned.:

    os> source = people | fields accounts, accounts.id;
    fetched rows / total rows = 1/1
    +------------+---------------+
    | accounts   | accounts.id   |
    |------------+---------------|
    | {'id': 1}  | 1             |
    +------------+---------------+
",
                                                      },
                                                    ],
                                                  },
                                                ]
                                              }
                                              placeholder="Refer commands, functions and language structures"
                                              selectedOptions={
                                                Array [
                                                  Object {
                                                    "label": "where",
                                                    "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                                                  },
                                                ]
                                              }
                                              singleSelection={false}
                                              sortMatchesBy="none"
                                            >
                                              <div
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                className="euiComboBox"
                                                onKeyDown={[Function]}
                                                role="combobox"
                                              >
                                                <EuiComboBoxInput
                                                  autoSizeInputRef={[Function]}
                                                  compressed={false}
                                                  fullWidth={false}
                                                  hasSelectedOptions={true}
                                                  inputRef={[Function]}
                                                  isListOpen={false}
                                                  noIcon={false}
                                                  onChange={[Function]}
                                                  onClear={[Function]}
                                                  onClick={[Function]}
                                                  onCloseListClick={[Function]}
                                                  onFocus={[Function]}
                                                  onOpenListClick={[Function]}
                                                  onRemoveOption={[Function]}
                                                  placeholder="Refer commands, functions and language structures"
                                                  rootId={[Function]}
                                                  searchValue=""
                                                  selectedOptions={
                                                    Array [
                                                      Object {
                                                        "label": "where",
                                                        "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                                                      },
                                                    ]
                                                  }
                                                  singleSelection={false}
                                                  toggleButtonRef={[Function]}
                                                  updatePosition={[Function]}
                                                  value="where"
                                                >
                                                  <EuiFormControlLayout
                                                    clear={
                                                      Object {
                                                        "data-test-subj": "comboBoxClearButton",
                                                        "onClick": [Function],
                                                      }
                                                    }
                                                    compressed={false}
                                                    fullWidth={false}
                                                    icon={
                                                      Object {
                                                        "aria-label": "Open list of options",
                                                        "data-test-subj": "comboBoxToggleListButton",
                                                        "disabled": undefined,
                                                        "onClick": [Function],
                                                        "ref": [Function],
                                                        "side": "right",
                                                        "type": "arrowDown",
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="euiFormControlLayout"
                                                    >
                                                      <div
                                                        className="euiFormControlLayout__childrenWrapper"
                                                      >
                                                        <div
                                                          className="euiComboBox__inputWrap euiComboBox__inputWrap-isClearable"
                                                          data-test-subj="comboBoxInput"
                                                          onClick={[Function]}
                                                          tabIndex={-1}
                                                        >
                                                          <EuiComboBoxPill
                                                            asPlainText={false}
                                                            color="hollow"
                                                            key="where"
                                                            onClose={[Function]}
                                                            option={
                                                              Object {
                                                                "label": "where",
                                                                "value": "## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
",
                                                              }
                                                            }
                                                            value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                          >
                                                            <EuiI18n
                                                              default="Remove {children} from selection in this group"
                                                              token="euiComboBoxPill.removeSelection"
                                                              values={
                                                                Object {
                                                                  "children": "where",
                                                                }
                                                              }
                                                            >
                                                              <EuiBadge
                                                                className="euiComboBoxPill"
                                                                closeButtonProps={
                                                                  Object {
                                                                    "tabIndex": -1,
                                                                  }
                                                                }
                                                                color="hollow"
                                                                iconOnClick={[Function]}
                                                                iconOnClickAriaLabel="Remove where from selection in this group"
                                                                iconSide="right"
                                                                iconType="cross"
                                                                title="where"
                                                                value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                              >
                                                                <EuiInnerText>
                                                                  <span
                                                                    className="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                                                    title="where"
                                                                    value="## where
---

### Description

The \`where\` command bool-expression to filter the search result. The
\`where\` command only return the result when bool-expression evaluated to
true.

### Syntax

where &lt;boolean-expression&gt;

-   bool-expression: optional. any expression which could be evaluated
    to boolean value.

### Example 1: Filter result set with condition

The example show fetch all the document from accounts index with .

PPL query:

    os> source=accounts | where account_number=1 or gender=\\"F\\" | fields account_number, gender;
    fetched rows / total rows = 2/2
    +------------------+----------+
    | account_number   | gender   |
    |------------------+----------|
    | 1                | M        |
    | 13               | F        |
    +------------------+----------+
"
                                                                  >
                                                                    <span
                                                                      className="euiBadge__content"
                                                                    >
                                                                      <span
                                                                        className="euiBadge__text"
                                                                      >
                                                                        where
                                                                      </span>
                                                                      <button
                                                                        aria-label="Remove where from selection in this group"
                                                                        className="euiBadge__iconButton"
                                                                        disabled={false}
                                                                        onClick={[Function]}
                                                                        title="Remove where from selection in this group"
                                                                        type="button"
                                                                      >
                                                                        <EuiIcon
                                                                          className="euiBadge__icon"
                                                                          color="inherit"
                                                                          size="s"
                                                                          tabIndex={-1}
                                                                          type="cross"
                                                                        >
                                                                          <EuiIconEmpty
                                                                            aria-hidden={true}
                                                                            className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                                            focusable="false"
                                                                            role="img"
                                                                            style={null}
                                                                            tabIndex={-1}
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiBadge__icon"
                                                                              focusable="false"
                                                                              height={16}
                                                                              role="img"
                                                                              style={null}
                                                                              tabIndex={-1}
                                                                              viewBox="0 0 16 16"
                                                                              width={16}
                                                                              xmlns="http://www.w3.org/2000/svg"
                                                                            />
                                                                          </EuiIconEmpty>
                                                                        </EuiIcon>
                                                                      </button>
                                                                    </span>
                                                                  </span>
                                                                </EuiInnerText>
                                                              </EuiBadge>
                                                            </EuiI18n>
                                                          </EuiComboBoxPill>
                                                          <AutosizeInput
                                                            aria-controls=""
                                                            className="euiComboBox__input"
                                                            data-test-subj="comboBoxSearchInput"
                                                            injectStyles={true}
                                                            inputRef={[Function]}
                                                            minWidth={1}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            role="textbox"
                                                            style={
                                                              Object {
                                                                "fontSize": 14,
                                                              }
                                                            }
                                                            value=""
                                                          >
                                                            <div
                                                              className="euiComboBox__input"
                                                              style={
                                                                Object {
                                                                  "display": "inline-block",
                                                                  "fontSize": 14,
                                                                }
                                                              }
                                                            >
                                                              <input
                                                                aria-controls=""
                                                                data-test-subj="comboBoxSearchInput"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                role="textbox"
                                                                style={
                                                                  Object {
                                                                    "boxSizing": "content-box",
                                                                    "width": "2px",
                                                                  }
                                                                }
                                                                value=""
                                                              />
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "height": 0,
                                                                    "left": 0,
                                                                    "overflow": "scroll",
                                                                    "position": "absolute",
                                                                    "top": 0,
                                                                    "visibility": "hidden",
                                                                    "whiteSpace": "pre",
                                                                  }
                                                                }
                                                              />
                                                            </div>
                                                          </AutosizeInput>
                                                        </div>
                                                        <EuiFormControlLayoutIcons
                                                          clear={
                                                            Object {
                                                              "data-test-subj": "comboBoxClearButton",
                                                              "onClick": [Function],
                                                            }
                                                          }
                                                          compressed={false}
                                                          icon={
                                                            Object {
                                                              "aria-label": "Open list of options",
                                                              "data-test-subj": "comboBoxToggleListButton",
                                                              "disabled": undefined,
                                                              "onClick": [Function],
                                                              "ref": [Function],
                                                              "side": "right",
                                                              "type": "arrowDown",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                          >
                                                            <EuiFormControlLayoutClearButton
                                                              data-test-subj="comboBoxClearButton"
                                                              onClick={[Function]}
                                                              size="m"
                                                            >
                                                              <EuiI18n
                                                                default="Clear input"
                                                                token="euiFormControlLayoutClearButton.label"
                                                              >
                                                                <button
                                                                  aria-label="Clear input"
                                                                  className="euiFormControlLayoutClearButton"
                                                                  data-test-subj="comboBoxClearButton"
                                                                  onClick={[Function]}
                                                                  type="button"
                                                                >
                                                                  <EuiIcon
                                                                    className="euiFormControlLayoutClearButton__icon"
                                                                    type="cross"
                                                                  >
                                                                    <EuiIconEmpty
                                                                      aria-hidden={true}
                                                                      className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                                      focusable="false"
                                                                      role="img"
                                                                      style={null}
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutClearButton__icon"
                                                                        focusable="false"
                                                                        height={16}
                                                                        role="img"
                                                                        style={null}
                                                                        viewBox="0 0 16 16"
                                                                        width={16}
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                      />
                                                                    </EuiIconEmpty>
                                                                  </EuiIcon>
                                                                </button>
                                                              </EuiI18n>
                                                            </EuiFormControlLayoutClearButton>
                                                            <EuiFormControlLayoutCustomIcon
                                                              aria-label="Open list of options"
                                                              data-test-subj="comboBoxToggleListButton"
                                                              iconRef={[Function]}
                                                              onClick={[Function]}
                                                              size="m"
                                                              type="arrowDown"
                                                            >
                                                              <button
                                                                aria-label="Open list of options"
                                                                className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                                                data-test-subj="comboBoxToggleListButton"
                                                                onClick={[Function]}
                                                                type="button"
                                                              >
                                                                <EuiIcon
                                                                  aria-hidden="true"
                                                                  className="euiFormControlLayoutCustomIcon__icon"
                                                                  size="m"
                                                                  type="arrowDown"
                                                                >
                                                                  <EuiIconEmpty
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                                    focusable="false"
                                                                    role="img"
                                                                    style={null}
                                                                  >
                                                                    <svg
                                                                      aria-hidden={true}
                                                                      className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                                      focusable="false"
                                                                      height={16}
                                                                      role="img"
                                                                      style={null}
                                                                      viewBox="0 0 16 16"
                                                                      width={16}
                                                                      xmlns="http://www.w3.org/2000/svg"
                                                                    />
                                                                  </EuiIconEmpty>
                                                                </EuiIcon>
                                                              </button>
                                                            </EuiFormControlLayoutCustomIcon>
                                                          </div>
                                                        </EuiFormControlLayoutIcons>
                                                      </div>
                                                    </div>
                                                  </EuiFormControlLayout>
                                                </EuiComboBoxInput>
                                              </div>
                                            </EuiComboBox>
                                          </div>
                                        </EuiFlexItem>
                                        <EuiFlexItem
                                          style={
                                            Object {
                                              "justifyContent": "center",
                                            }
                                          }
                                        >
                                          <div
                                            className="euiFlexItem"
                                            style={
                                              Object {
                                                "justifyContent": "center",
                                              }
                                            }
                                          >
                                            <EuiText
                                              color="subdued"
                                              size="s"
                                            >
                                              <div
                                                className="euiText euiText--small"
                                              >
                                                <EuiTextColor
                                                  color="subdued"
                                                  component="div"
                                                >
                                                  <div
                                                    className="euiTextColor euiTextColor--subdued"
                                                  >
                                                    <EuiLink
                                                      external={true}
                                                      href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                                      target="_blank"
                                                    >
                                                      <a
                                                        className="euiLink euiLink--primary"
                                                        href="https://opensearch.org/docs/latest/observability-plugin/ppl/commands/"
                                                        rel="noopener noreferrer"
                                                        target="_blank"
                                                      >
                                                        Learn More
                                                        <EuiIcon
                                                          aria-label="External link"
                                                          className="euiLink__externalIcon"
                                                          size="s"
                                                          type="popout"
                                                        >
                                                          <EuiIconEmpty
                                                            aria-hidden={true}
                                                            aria-label="External link"
                                                            className="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                                            focusable="false"
                                                            role="img"
                                                            style={null}
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              aria-label="External link"
                                                              className="euiIcon euiIcon--small euiIcon-isLoading euiLink__externalIcon"
                                                              focusable="false"
                                                              height={16}
                                                              role="img"
                                                              style={null}
                                                              viewBox="0 0 16 16"
                                                              width={16}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            />
                                                          </EuiIconEmpty>
                                                        </EuiIcon>
                                                        <EuiScreenReaderOnly>
                                                          <span
                                                            className="euiScreenReaderOnly"
                                                          >
                                                            <EuiI18n
                                                              default="(opens in a new tab or window)"
                                                              token="euiLink.newTarget.screenReaderOnlyText"
                                                            >
                                                              (opens in a new tab or window)
                                                            </EuiI18n>
                                                          </span>
                                                        </EuiScreenReaderOnly>
                                                      </a>
                                                    </EuiLink>
                                                  </div>
                                                </EuiTextColor>
                                              </div>
                                            </EuiText>
                                          </div>
                                        </EuiFlexItem>
                                      </span>
                                    </EuiFlexGroup>
                                    <EuiSpacer
                                      size="l"
                                    >
                                      <div
                                        className="euiSpacer euiSpacer--l"
                                      />
                                    </EuiSpacer>
                                    <EuiMarkdownFormat>
                                      <div
                                        className="euiMarkdownFormat"
                                      >
                                        <div>
                                          <h2
                                            key="h-2"
                                          >
                                            where
                                          </h2>
                                          

                                          <hr
                                            key="h-3"
                                          />
                                          

                                          <h3
                                            key="h-4"
                                          >
                                            Description
                                          </h3>
                                          

                                          <p
                                            key="h-5"
                                          >
                                            The 
                                            <code
                                              key="h-6"
                                            >
                                              <EuiCode>
                                                <EuiCodeBlockImpl
                                                  inline={true}
                                                >
                                                  <span
                                                    className="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                                    style={Object {}}
                                                  >
                                                    <code
                                                      className="euiCodeBlock__code"
                                                    >
                                                      where
                                                    </code>
                                                  </span>
                                                </EuiCodeBlockImpl>
                                              </EuiCode>
                                            </code>
                                             command bool-expression to filter the search result. The

                                            <code
                                              key="h-7"
                                            >
                                              <EuiCode>
                                                <EuiCodeBlockImpl
                                                  inline={true}
                                                >
                                                  <span
                                                    className="euiCodeBlock euiCodeBlock--fontSmall euiCodeBlock--paddingLarge euiCodeBlock--inline prismjs language-none"
                                                    style={Object {}}
                                                  >
                                                    <code
                                                      className="euiCodeBlock__code"
                                                    >
                                                      where
                                                    </code>
                                                  </span>
                                                </EuiCodeBlockImpl>
                                              </EuiCode>
                                            </code>
                                             command only return the result when bool-expression evaluated to
true.
                                          </p>
                                          

                                          <h3
                                            key="h-8"
                                          >
                                            Syntax
                                          </h3>
                                          

                                          <p
                                            key="h-9"
                                          >
                                            where 
                                            &lt;
                                            boolean-expression
                                            &gt;
                                          </p>
                                          

                                          <ul
                                            key="h-10"
                                          >
                                            

                                            <li
                                              key="h-11"
                                            >
                                              bool-expression: optional. any expression which could be evaluated
to boolean value.
                                            </li>
                                            

                                          </ul>
                                          

                                          <h3
                                            key="h-12"
                                          >
                                            Example 1: Filter result set with condition
                                          </h3>
                                          

                                          <p
                                            key="h-13"
                                          >
                                            The example show fetch all the document from accounts index with .
                                          </p>
                                          

                                          <p
                                            key="h-14"
                                          >
                                            PPL query:
                                          </p>
                                          

                                          <pre
                                            key="h-15"
                                          >
                                            <code
                                              key="h-16"
                                            >
                                              <EuiCodeBlock
                                                fontSize="m"
                                                paddingSize="s"
                                              >
                                                <EuiCodeBlockImpl
                                                  fontSize="m"
                                                  inline={false}
                                                  paddingSize="s"
                                                >
                                                  <div
                                                    className="euiCodeBlock euiCodeBlock--fontMedium euiCodeBlock--paddingSmall prismjs language-none"
                                                    style={Object {}}
                                                  >
                                                    <pre
                                                      className="euiCodeBlock__pre euiCodeBlock__pre--whiteSpacePreWrap"
                                                      style={Object {}}
                                                      tabIndex={-1}
                                                    >
                                                      <code
                                                        className="euiCodeBlock__code"
                                                      >
                                                        os&gt; source=accounts | where account_number=1 or gender="F" | fields account_number, gender;
fetched rows / total rows = 2/2
+------------------+----------+
| account_number   | gender   |
|------------------+----------|
| 1                | M        |
| 13               | F        |
+------------------+----------+

                                                      </code>
                                                    </pre>
                                                  </div>
                                                </EuiCodeBlockImpl>
                                              </EuiCodeBlock>
                                            </code>
                                          </pre>
                                        </div>
                                      </div>
                                    </EuiMarkdownFormat>
                                  </div>
                                </div>
                              </div>
                            </EuiFlyoutBody>
                            <EuiFlyoutFooter>
                              <div
                                className="euiFlyoutFooter"
                              >
                                <EuiFlexGroup
                                  gutterSize="s"
                                  justifyContent="spaceBetween"
                                >
                                  <div
                                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                  >
                                    <EuiFlexItem
                                      grow={false}
                                    >
                                      <div
                                        className="euiFlexItem euiFlexItem--flexGrowZero"
                                      >
                                        <EuiButton
                                          onClick={[Function]}
                                        >
                                          <EuiButtonDisplay
                                            baseClassName="euiButton"
                                            disabled={false}
                                            element="button"
                                            isDisabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="euiButton euiButton--primary"
                                              disabled={false}
                                              onClick={[Function]}
                                              style={
                                                Object {
                                                  "minWidth": undefined,
                                                }
                                              }
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButton__content"
                                                iconSide="left"
                                                textProps={
                                                  Object {
                                                    "className": "euiButton__text",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButton__content"
                                                >
                                                  <span
                                                    className="euiButton__text"
                                                  >
                                                    Close
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonDisplay>
                                        </EuiButton>
                                      </div>
                                    </EuiFlexItem>
                                  </div>
                                </EuiFlexGroup>
                              </div>
                            </EuiFlyoutFooter>
                          </div>
                        </EuiOutsideClickDetector>
                      </div>
                    </ForwardRef>
                    <div
                      data-focus-guard={true}
                      style={
                        Object {
                          "height": "0px",
                          "left": "1px",
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "fixed",
                          "top": "1px",
                          "width": "1px",
                        }
                      }
                      tabIndex={0}
                    />
                  </ForwardRef(FocusLockUI)>
                  <RequireSideCar
                    noIsolation={true}
                    onClickOutside={[Function]}
                    setLockProps={[Function]}
                    sideCar={
                      Object {
                        "assignMedium": [Function],
                        "assignSyncMedium": [Function],
                        "options": Object {
                          "async": true,
                          "ssr": false,
                        },
                        "read": [Function],
                        "useMedium": [Function],
                      }
                    }
                  >
                    <SideCar
                      noIsolation={true}
                      onClickOutside={[Function]}
                      setLockProps={[Function]}
                      sideCar={
                        Object {
                          "assignMedium": [Function],
                          "assignSyncMedium": [Function],
                          "options": Object {
                            "async": true,
                            "ssr": false,
                          },
                          "read": [Function],
                          "useMedium": [Function],
                        }
                      }
                    >
                      <Effect
                        noIsolation={true}
                        onClickOutside={[Function]}
                        setLockProps={[Function]}
                      >
                        <Component>
                          <Sheet
                            styles="
 [data-focus-on-hidden] {
   pointer-events: none !important;
 }
"
                          />
                        </Component>
                      </Effect>
                    </SideCar>
                  </RequireSideCar>
                </ForwardRef>
              </ForwardRef>
            </EuiFocusTrap>
          </Portal>
        </EuiPortal>
      </EuiFlyout>
    </div>
  </FlyoutContainers>
</PPLReferenceFlyout>
`;
